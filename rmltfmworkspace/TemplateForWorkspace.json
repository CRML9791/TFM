{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "rmltfmworkspace"
		},
		"DWH_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'DWH'"
		},
		"Dataverse_CRM1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'Dataverse_CRM1'"
		},
		"MetadataLogs_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'MetadataLogs'"
		},
		"STG Base_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'STG Base'"
		},
		"rmldatalake_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'rmldatalake'"
		},
		"rmltfmworkspace-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'rmltfmworkspace-WorkspaceDefaultSqlServer'"
		},
		"tfmworkspace-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'tfmworkspace-WorkspaceDefaultSqlServer'"
		},
		"Dataverse_CRM1_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "admin@CRM371482.onmicrosoft.com"
		},
		"rmldatalake_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://rmldatalakestoragegen2.dfs.core.windows.net/"
		},
		"rmltfmworkspace-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://rmldatalakestoragegen2.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/0 Orquestador DataverseParquet')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "DataverseToParquetAccounts",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DataverseToParquetAppointments",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DataverseToParquetAccounts1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DataverseToParquetAppointments",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DataverseToParquetGoals",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DataverseToParquetAppointments1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DataverseToParquetEmails",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DataverseToParquetPhoneCalls",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DataverseToParquetAppointments1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DataverseToParquetGoals",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DataverseToParquetOpportunities",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DataverseToParquetGoal1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DataverseToParquetLeads",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DataverseToParquetProductFamilies",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DataverseToParquetLeads1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DataverseToParquetOpportunities",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DataverseToParquetOpportunities1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DataverseToParquetOpportunityProducts",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DataverseToParquetTerritories",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DataverseToParquetOpportunityProducts1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DataverseToParquetPhoneCalls",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DataverseToParquetSystemUsers",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DataverseToParquetPhoneCalls1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DataverseToParquetProductFamilies",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DataverseToParquetEmails",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DataverseToParquetProductFamilies1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DataverseToParquetProduct",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DataverseToParquetOpportunityProducts",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DataverseToParquetProducts1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DataverseToParquetSystemManagers",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DataverseToParquetAccounts",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DataverseToParquetSystemManagers1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DataverseToParquetSystemUsers",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DataverseToParquetProduct",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DataverseToParquetSystemusers1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DataverseToParquetTerritories",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DataverseToParquetTask",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DataverseToParquetTerritories1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DataverseToParquetTask",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DataverseToParquetSystemManagers",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DataverseToParquetTask1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "0 DataverseToParquet"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-25T06:11:25Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/DataverseToParquetAccounts1')]",
				"[concat(variables('workspaceId'), '/pipelines/DataverseToParquetAppointments1')]",
				"[concat(variables('workspaceId'), '/pipelines/DataverseToParquetGoal1')]",
				"[concat(variables('workspaceId'), '/pipelines/DataverseToParquetLeads1')]",
				"[concat(variables('workspaceId'), '/pipelines/DataverseToParquetOpportunities1')]",
				"[concat(variables('workspaceId'), '/pipelines/DataverseToParquetOpportunityProducts1')]",
				"[concat(variables('workspaceId'), '/pipelines/DataverseToParquetPhoneCalls1')]",
				"[concat(variables('workspaceId'), '/pipelines/DataverseToParquetProductFamilies1')]",
				"[concat(variables('workspaceId'), '/pipelines/DataverseToParquetProducts1')]",
				"[concat(variables('workspaceId'), '/pipelines/DataverseToParquetSystemManagers1')]",
				"[concat(variables('workspaceId'), '/pipelines/DataverseToParquetSystemusers1')]",
				"[concat(variables('workspaceId'), '/pipelines/DataverseToParquetTerritories1')]",
				"[concat(variables('workspaceId'), '/pipelines/DataverseToParquetTask1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1 Orquestador ParquetToSTG')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ParquetToSTG Accounts",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ParquetToSTG Appointments",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy Parquet to STG Account",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ParquetToSTG Appointments",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ParquetToSTG Goals",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy Parquet to STG Appointment",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ParquetToSTG Emails",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ParquetToSTG PhoneCalls",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy Parquet to STG Emails",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ParquetToSTG Goals",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ParquetToSTG Opportunities",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy Parquet to STG Goals",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ParquetToSTG Leads",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ParquetToSTG ProductFamilies",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy Parquet to STG Leads",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ParquetToSTG Opportunities",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy Parquet to STG Opportunities",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ParquetToSTG OpportunityProducts",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ParquetToSTG Territories",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy Parquet to STG OpportunityProducts",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ParquetToSTG PhoneCalls",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ParquetToSTG SystemUsers",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy Parquet to STG PhoneCalls",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ParquetToSTG ProductFamilies",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ParquetToSTG Emails",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DataverseToParquetProductFamilies1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ParquetToSTG Product",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ParquetToSTG OpportunityProducts",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy Parquet to STG Products",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ParquetToSTG SystemManagers",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ParquetToSTG Accounts",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy Parquet to STG SystemManagers",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ParquetToSTG SystemUsers",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ParquetToSTG Product",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy Parquet to STG SystemUsers",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ParquetToSTG Territories",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ParquetToSTG Task",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy Parquet to STG Territories",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ParquetToSTG Task",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ParquetToSTG SystemManagers",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy Parquet to STG Tasks",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "1 ParquetToSTG"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-25T06:16:19Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Copy Parquet to STG Account')]",
				"[concat(variables('workspaceId'), '/pipelines/Copy Parquet to STG Appointment')]",
				"[concat(variables('workspaceId'), '/pipelines/Copy Parquet to STG Emails')]",
				"[concat(variables('workspaceId'), '/pipelines/Copy Parquet to STG Goals')]",
				"[concat(variables('workspaceId'), '/pipelines/Copy Parquet to STG Leads')]",
				"[concat(variables('workspaceId'), '/pipelines/Copy Parquet to STG Opportunities')]",
				"[concat(variables('workspaceId'), '/pipelines/Copy Parquet to STG OpportunityProducts')]",
				"[concat(variables('workspaceId'), '/pipelines/Copy Parquet to STG PhoneCalls')]",
				"[concat(variables('workspaceId'), '/pipelines/DataverseToParquetProductFamilies1')]",
				"[concat(variables('workspaceId'), '/pipelines/Copy Parquet to STG Products')]",
				"[concat(variables('workspaceId'), '/pipelines/Copy Parquet to STG SystemManagers')]",
				"[concat(variables('workspaceId'), '/pipelines/Copy Parquet to STG SystemUsers')]",
				"[concat(variables('workspaceId'), '/pipelines/Copy Parquet to STG Territories')]",
				"[concat(variables('workspaceId'), '/pipelines/Copy Parquet to STG Tasks')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy Parquet to STG Account')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set StarProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StarProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set StarProcess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RAW_to_STG_Accounts",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DataverseParquet": {},
									"STG": {},
									"Nuevos": {},
									"Actualizaciones": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "OK",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "KO",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							},
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": {
								"value": "Copy Accounts",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RecLOG",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{variables('Fase')}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StarProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Fase": {
						"type": "String",
						"defaultValue": "STG"
					},
					"StarProcess": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					},
					"Actividad": {
						"type": "String"
					}
				},
				"folder": {
					"name": "1 ParquetToSTG"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-24T17:45:18Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/RAW_to_STG_Accounts')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy Parquet to STG Appointment')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set StarProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StarProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set StarProcess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RAW_to_STG_Appointment",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DataverseParquet": {},
									"STG": {},
									"Nuevos": {},
									"Actualizaciones": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "OK",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "KO",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							},
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": {
								"value": "Copy Appointments",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RecLOG",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{variables('Fase')}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StarProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Fase": {
						"type": "String",
						"defaultValue": "STG"
					},
					"StarProcess": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					},
					"Actividad": {
						"type": "String"
					}
				},
				"folder": {
					"name": "1 ParquetToSTG/Activities"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-25T05:20:46Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/RAW_to_STG_Appointment')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy Parquet to STG Emails')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set StarProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StarProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set StarProcess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RAW_to_STG_Emails",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DataverseParquet": {},
									"STG": {},
									"Nuevos": {},
									"Actualizaciones": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "OK",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "KO",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							},
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": {
								"value": "Copy Emails",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RecLOG",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{variables('Fase')}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StarProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Fase": {
						"type": "String",
						"defaultValue": "STG"
					},
					"StarProcess": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					},
					"Actividad": {
						"type": "String"
					}
				},
				"folder": {
					"name": "1 ParquetToSTG/Activities"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-25T05:21:59Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/RAW_to_STG_Emails')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy Parquet to STG Goals')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set StarProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StarProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set StarProcess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RAW_to_STG_Goals",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DataverseParquet": {},
									"STG": {},
									"Nuevos": {},
									"Actualizaciones": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "OK",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "KO",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							},
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": {
								"value": "Copy Goals",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RecLOG",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{variables('Fase')}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StarProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Fase": {
						"type": "String",
						"defaultValue": "STG"
					},
					"StarProcess": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					},
					"Actividad": {
						"type": "String"
					}
				},
				"folder": {
					"name": "1 ParquetToSTG"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-25T05:22:36Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/RAW_to_STG_Goals')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy Parquet to STG Leads')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set StarProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StarProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set StarProcess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RAW_to_STG_Leads",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DataverseParquet": {},
									"STG": {},
									"Nuevos": {},
									"Actualizaciones": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "OK",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "KO",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							},
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": {
								"value": "Copy Leads",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RecLOG",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{variables('Fase')}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StarProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Fase": {
						"type": "String",
						"defaultValue": "STG"
					},
					"StarProcess": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					},
					"Actividad": {
						"type": "String"
					}
				},
				"folder": {
					"name": "1 ParquetToSTG"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-25T05:24:44Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/RAW_to_STG_Leads')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy Parquet to STG Opportunities')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set StarProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StarProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set StarProcess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RAW_to_STG_Opportunities",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DataverseParquet": {},
									"STG": {},
									"Nuevos": {},
									"Actualizaciones": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "OK",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "KO",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							},
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": {
								"value": "Copy Opportunities",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RecLOG",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{variables('Fase')}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StarProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Fase": {
						"type": "String",
						"defaultValue": "STG"
					},
					"StarProcess": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					},
					"Actividad": {
						"type": "String"
					}
				},
				"folder": {
					"name": "1 ParquetToSTG"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-25T05:24:49Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/RAW_to_STG_Opportunities')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy Parquet to STG OpportunityProducts')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set StarProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StarProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set StarProcess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RAW_to_STG_OpportunityProducts",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DataverseParquet": {},
									"STG": {},
									"Nuevos": {},
									"Actualizaciones": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "OK",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "KO",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							},
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": {
								"value": "Copy OpportunityProducts",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RecLOG",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{variables('Fase')}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StarProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Fase": {
						"type": "String",
						"defaultValue": "STG"
					},
					"StarProcess": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					},
					"Actividad": {
						"type": "String"
					}
				},
				"folder": {
					"name": "1 ParquetToSTG"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-25T05:24:54Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/RAW_to_STG_OpportunityProducts')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy Parquet to STG PhoneCalls')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set StarProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StarProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set StarProcess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RAW_to_STG_PhoneCalls",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DataverseParquet": {},
									"STG": {},
									"Nuevos": {},
									"Actualizaciones": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "OK",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "KO",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							},
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": {
								"value": "Copy PhoneCalls",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RecLOG",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{variables('Fase')}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StarProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Fase": {
						"type": "String",
						"defaultValue": "STG"
					},
					"StarProcess": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					},
					"Actividad": {
						"type": "String"
					}
				},
				"folder": {
					"name": "1 ParquetToSTG/Activities"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-25T06:07:12Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/RAW_to_STG_PhoneCalls')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy Parquet to STG Products')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set StarProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StarProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set StarProcess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RAW_to_STG_Products",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DataverseParquet": {},
									"STG": {},
									"Nuevos": {},
									"Actualizaciones": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "OK",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "KO",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							},
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": {
								"value": "Copy Products",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RecLOG",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{variables('Fase')}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StarProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Fase": {
						"type": "String",
						"defaultValue": "STG"
					},
					"StarProcess": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					},
					"Actividad": {
						"type": "String"
					}
				},
				"folder": {
					"name": "1 ParquetToSTG"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-25T06:05:46Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/RAW_to_STG_Products')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy Parquet to STG ProductsFamilies')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set StarProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StarProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set StarProcess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RAW_to_STG_ProductsFamily",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DataverseParquet": {},
									"STG": {},
									"Nuevos": {},
									"Actualizaciones": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "OK",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "KO",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							},
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": {
								"value": "Copy FamilyProducts",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RecLOG",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{variables('Fase')}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StarProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Fase": {
						"type": "String",
						"defaultValue": "STG"
					},
					"StarProcess": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					},
					"Actividad": {
						"type": "String"
					}
				},
				"folder": {
					"name": "1 ParquetToSTG"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-25T06:06:16Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/RAW_to_STG_ProductsFamily')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy Parquet to STG SystemManagers')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set StarProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StarProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set StarProcess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RAW_to_STG_SystemManagers",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DataverseParquet": {},
									"STG": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "OK",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "KO",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							},
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": {
								"value": "Copy SystemManagers",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RecLOG",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{variables('Fase')}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StarProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Fase": {
						"type": "String",
						"defaultValue": "STG"
					},
					"StarProcess": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					},
					"Actividad": {
						"type": "String"
					}
				},
				"folder": {
					"name": "1 ParquetToSTG"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-25T05:28:29Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/RAW_to_STG_SystemManagers')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy Parquet to STG SystemUsers')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set StarProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StarProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set StarProcess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RAW_to_STG_SystemUsers",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DataverseParquet": {},
									"STG": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "OK",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "KO",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							},
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": {
								"value": "Copy SystemUsers",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RecLOG",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{variables('Fase')}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StarProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Fase": {
						"type": "String",
						"defaultValue": "STG"
					},
					"StarProcess": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					},
					"Actividad": {
						"type": "String"
					}
				},
				"folder": {
					"name": "1 ParquetToSTG"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-25T05:27:50Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/RAW_to_STG_SystemUsers')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy Parquet to STG Tasks')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set StarProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StarProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set StarProcess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RAW_to_STG_Task",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DataverseParquet": {},
									"STG": {},
									"Nuevos": {},
									"Actualizaciones": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "OK",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "KO",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							},
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": {
								"value": "Copy Task",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RecLOG",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{variables('Fase')}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StarProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Fase": {
						"type": "String",
						"defaultValue": "STG"
					},
					"StarProcess": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					},
					"Actividad": {
						"type": "String"
					}
				},
				"folder": {
					"name": "1 ParquetToSTG/Activities"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-25T05:27:42Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/RAW_to_STG_Task')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy Parquet to STG Territories')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set StarProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StarProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set StarProcess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RAW_to_STG_Territories",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DataverseParquet": {},
									"STG": {},
									"Nuevos": {},
									"Actualizaciones": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "OK",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "KO",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							},
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": {
								"value": "Copy Territories",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RecLOG",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{variables('Fase')}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StarProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Fase": {
						"type": "String",
						"defaultValue": "STG"
					},
					"StarProcess": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					},
					"Actividad": {
						"type": "String"
					}
				},
				"folder": {
					"name": "1 ParquetToSTG"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-25T05:27:45Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/RAW_to_STG_Territories')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy STG to DWH Accounts')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set StarProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StarProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set StarProcess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "STG_to_DWH_Accounts",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"STG": {},
									"DWH": {},
									"SystemUsers": {},
									"Lead": {},
									"Territory": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "OK",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "KO",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							},
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": {
								"value": "Copy Goals",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RecLOG",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{variables('Fase')}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StarProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Fase": {
						"type": "String",
						"defaultValue": "DWH"
					},
					"StarProcess": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					},
					"Actividad": {
						"type": "String"
					}
				},
				"folder": {
					"name": "2 STGToDWH"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-31T05:46:35Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/STG_to_DWH_Accounts')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy STG to DWH Goals')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set StarProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StarProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set StarProcess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "STG_to_DWH_Goals",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"STG": {},
									"DWH": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "OK",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "KO",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							},
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": {
								"value": "Copy Goals",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RecLOG",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{variables('Fase')}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StarProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Fase": {
						"type": "String",
						"defaultValue": "DWH"
					},
					"StarProcess": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					},
					"Actividad": {
						"type": "String"
					}
				},
				"folder": {
					"name": "2 STGToDWH"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-31T05:46:35Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/STG_to_DWH_Goals')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy STG to DWH Leads')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set StarProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StarProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set StarProcess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "STG_to_DWH_Leads",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"STG": {},
									"DWH": {},
									"SystemUser": {},
									"Product": {},
									"Territory": {},
									"Nuevos": {},
									"Actualizaciones": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "OK",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "KO",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							},
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": {
								"value": "Copy Leads",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RecLOG",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{variables('Fase')}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StarProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Fase": {
						"type": "String",
						"defaultValue": "DWH"
					},
					"StarProcess": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					},
					"Actividad": {
						"type": "String"
					}
				},
				"folder": {
					"name": "2 STGToDWH"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-31T12:28:10Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/STG_to_DWH_Leads')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy STG to DWH Opportunities')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set StarProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StarProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set StarProcess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "STG_to_DWH_Opportunities",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"STG": {},
									"DWH": {},
									"SystemUsers": {},
									"Accounts": {},
									"Leads": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "OK",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "KO",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							},
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": {
								"value": "Copy Opportunities",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RecLOG",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{variables('Fase')}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StarProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Fase": {
						"type": "String",
						"defaultValue": "DWH"
					},
					"StarProcess": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					},
					"Actividad": {
						"type": "String"
					}
				},
				"folder": {
					"name": "2 STGToDWH"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-31T09:02:13Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/STG_to_DWH_Opportunities')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy STG to DWH OpportunityProducts')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set StarProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StarProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set StarProcess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "STG_to_DWH_OpportunityProducts",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"STG": {},
									"DWH": {},
									"Products": {},
									"Opportunities": {},
									"Nuevos": {},
									"Actualizaciones": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "OK",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "KO",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							},
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": {
								"value": "Copy OpportunityProduct",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RecLOG",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{variables('Fase')}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StarProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Fase": {
						"type": "String",
						"defaultValue": "DWH"
					},
					"StarProcess": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					},
					"Actividad": {
						"type": "String"
					}
				},
				"folder": {
					"name": "2 STGToDWH"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-31T09:02:13Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/STG_to_DWH_OpportunityProducts')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy STG to DWH ProductFamilies')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set StarProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StarProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set StarProcess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "STG_to_DWH_ProductsFamily",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"STG": {},
									"DWH": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "OK",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "KO",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							},
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": {
								"value": "Copy ProductFamillies",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RecLOG",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{variables('Fase')}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StarProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Fase": {
						"type": "String",
						"defaultValue": "DWH"
					},
					"StarProcess": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					},
					"Actividad": {
						"type": "String"
					}
				},
				"folder": {
					"name": "2 STGToDWH"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-31T07:07:06Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/STG_to_DWH_ProductsFamily')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy STG to DWH Products')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set StarProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StarProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set StarProcess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "STG_to_DWH_Products",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"STG": {},
									"DWH": {},
									"ProductFamilies": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "OK",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "KO",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							},
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": {
								"value": "Copy Products",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RecLOG",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{variables('Fase')}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StarProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Fase": {
						"type": "String",
						"defaultValue": "DWH"
					},
					"StarProcess": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					},
					"Actividad": {
						"type": "String"
					}
				},
				"folder": {
					"name": "2 STGToDWH"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-31T09:02:13Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/STG_to_DWH_Products')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy STG to DWH SystemManagers')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set StarProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StarProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set StarProcess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "STG_to_DWH_SystemManagers",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"STG": {},
									"DWH": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "OK",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "KO",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							},
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": {
								"value": "Copy SystemManagers",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RecLOG",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{variables('Fase')}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StarProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Fase": {
						"type": "String",
						"defaultValue": "DWH"
					},
					"StarProcess": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					},
					"Actividad": {
						"type": "String"
					}
				},
				"folder": {
					"name": "2 STGToDWH"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-30T04:29:39Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/STG_to_DWH_SystemManagers')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy STG to DWH SystemUsers')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set StarProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StarProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set StarProcess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "STG_to_DWH_SystemUsers",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"STG": {},
									"DWH": {},
									"STG2": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "OK",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "KO",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							},
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": {
								"value": "Copy SystemUsers",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RecLOG",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{variables('Fase')}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StarProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Fase": {
						"type": "String",
						"defaultValue": "DWH"
					},
					"StarProcess": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					},
					"Actividad": {
						"type": "String"
					}
				},
				"folder": {
					"name": "2 STGToDWH"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-27T06:02:12Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/STG_to_DWH_SystemUsers')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy STG to DWH Territories')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set StarProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StarProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set StarProcess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "STG_to_DWH_Territories",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"STG": {},
									"STG2": {},
									"DWH": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "OK",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": {
								"value": "KO",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							},
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": {
								"value": "Copy Territories",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RecLOG",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{variables('Fase')}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StarProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Fase": {
						"type": "String",
						"defaultValue": "DWH"
					},
					"StarProcess": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					},
					"Actividad": {
						"type": "String"
					}
				},
				"folder": {
					"name": "2 STGToDWH"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-30T05:57:00Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/STG_to_DWH_Territories')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataverseToParquetAccounts1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete Parket Accounts",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "StartProcess",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ParquetAccountsOk",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "*.parquet",
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "StartProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							},
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": "Delete Paquet Accounts"
						}
					},
					{
						"name": "LogDelete",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{'RAW'}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StartProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Delete Parket Accounts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Delete Parket Accounts",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "StartProcess_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LogDelete",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "StartProcess_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CommonDataServiceForAppsSource",
								"query": "<fetch>\n<entity name=\"account\">\n<attribute name=\"name\"/>\n<attribute name=\"territoryid\"/>\n<attribute name=\"ownerid\"/>\n<attribute name=\"originatingleadid\"/>\n<attribute name=\"numberofemployees\"/>\n<attribute name=\"modifiedon\"/>\n<attribute name=\"industrycode\"/>\n<attribute name=\"createdon\"/>\n<attribute name=\"revenue\"/>\n<attribute name=\"accountid\"/>\n<filter type=\"and\">\n<condition attribute=\"statecode\" value=\"0\" operator=\"eq\"/>\n<!--<condition attribute=\"modifiedon\" operator=\"yesterday\"/>-->\n</filter>\n</entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "originatingleadid",
											"type": "Guid"
										},
										"sink": {
											"name": "originatingleadid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "revenue",
											"type": "Decimal"
										},
										"sink": {
											"name": "revenue",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "industrycode",
											"type": "Int32"
										},
										"sink": {
											"name": "industrycode",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "numberofemployees",
											"type": "Int32"
										},
										"sink": {
											"name": "numberofemployees",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "accountid",
											"type": "Guid"
										},
										"sink": {
											"name": "accountid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "transactioncurrencyid",
											"type": "Guid"
										},
										"sink": {
											"name": "transactioncurrencyid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "ownerid",
											"type": "Guid"
										},
										"sink": {
											"name": "ownerid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "modifiedon",
											"type": "DateTime"
										},
										"sink": {
											"name": "modifiedon",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "territoryid",
											"type": "Guid"
										},
										"sink": {
											"name": "territoryid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "createdon",
											"type": "DateTime"
										},
										"sink": {
											"name": "createdon",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String"
										},
										"sink": {
											"name": "name",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DataverseAccounts",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetAccountsOk",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set OK_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set KO_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set Actividad_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK_copy1",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							},
							{
								"activity": "Set KO_copy1",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": "Copy Parquet Accounts"
						}
					},
					{
						"name": "LogCopyParquetAccounts",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{'RAW'}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StartProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"StartProcess": {
						"type": "String"
					},
					"Fase": {
						"type": "String",
						"defaultValue": "RAW"
					},
					"Actividad": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					}
				},
				"folder": {
					"name": "0 DataverseToParquet"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-24T16:43:56Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ParquetAccountsOk')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]",
				"[concat(variables('workspaceId'), '/datasets/DataverseAccounts')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataverseToParquetAppointments1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete Parket Appoitments",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "StartProcess",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ParquetAppointments",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "*.parquet",
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "StartProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							},
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": "Delete Paquet Appointments"
						}
					},
					{
						"name": "LogDelete",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{'RAW'}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StartProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Delete Parket Appoitments",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Delete Parket Appoitments",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "StartProcess_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LogDelete",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "StartProcess_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CommonDataServiceForAppsSource",
								"query": "<fetch>\n<entity name=\"appointment\">\n<attribute name=\"subject\"/>\n<attribute name=\"statuscode\"/>\n<attribute name=\"regardingobjectid\"/>\n<attribute name=\"prioritycode\"/>\n<attribute name=\"ownerid\"/>\n<attribute name=\"modifiedon\"/>\n<attribute name=\"actualdurationminutes\"/>\n<attribute name=\"scheduledend\"/>\n<attribute name=\"activityid\"/>\n<filter type=\"and\">\n<!--<condition attribute=\"modifiedon\" operator=\"yesterday\"/>-->\n</filter>\n</entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "isalldayevent",
											"type": "Boolean"
										},
										"sink": {
											"name": "isalldayevent",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "activityid",
											"type": "Guid"
										},
										"sink": {
											"name": "activityid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "statuscode",
											"type": "Int32"
										},
										"sink": {
											"name": "statuscode",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "subject",
											"type": "String"
										},
										"sink": {
											"name": "subject",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "scheduledend",
											"type": "DateTime"
										},
										"sink": {
											"name": "scheduledend",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "regardingobjectid",
											"type": "Guid"
										},
										"sink": {
											"name": "regardingobjectid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "actualdurationminutes",
											"type": "Int32"
										},
										"sink": {
											"name": "actualdurationminutes",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "ownerid",
											"type": "Guid"
										},
										"sink": {
											"name": "ownerid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "prioritycode",
											"type": "Int32"
										},
										"sink": {
											"name": "prioritycode",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "modifiedon",
											"type": "DateTime"
										},
										"sink": {
											"name": "modifiedon",
											"type": "DateTime"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DataverseAppointments",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetAppointments",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set OK_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set KO_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set Actividad_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK_copy1",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							},
							{
								"activity": "Set KO_copy1",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": "Copy Parquet Appointments"
						}
					},
					{
						"name": "LogCopyParquetAccounts",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{'RAW'}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StartProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"StartProcess": {
						"type": "String"
					},
					"Fase": {
						"type": "String",
						"defaultValue": "RAW"
					},
					"Actividad": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					}
				},
				"folder": {
					"name": "0 DataverseToParquet"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-24T17:29:14Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ParquetAppointments')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]",
				"[concat(variables('workspaceId'), '/datasets/DataverseAppointments')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataverseToParquetEmails1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete Parket Emails",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "StartProcess",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ParquetEmails",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "*.parquet",
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "StartProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							},
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": "Delete Paquet Emails"
						}
					},
					{
						"name": "LogDelete",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{'RAW'}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StartProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Delete Parket Emails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Delete Parket Emails",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "StartProcess_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LogDelete",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "StartProcess_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CommonDataServiceForAppsSource",
								"query": "<fetch>\n<entity name=\"email\">\n<attribute name=\"subject\"/>\n<attribute name=\"statuscode\"/>\n<attribute name=\"regardingobjectid\"/>\n<attribute name=\"prioritycode\"/>\n<attribute name=\"ownerid\"/>\n<attribute name=\"modifiedon\"/>\n<attribute name=\"actualdurationminutes\"/>\n<attribute name=\"scheduledend\"/>\n<attribute name=\"activityid\"/>\n<filter type=\"and\">\n<!--<condition attribute=\"modifiedon\" operator=\"yesterday\"/>-->\n</filter>\n</entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "activityid",
											"type": "Guid"
										},
										"sink": {
											"name": "activityid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "statuscode",
											"type": "Int32"
										},
										"sink": {
											"name": "statuscode",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "subject",
											"type": "String"
										},
										"sink": {
											"name": "subject",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "scheduledend",
											"type": "DateTime"
										},
										"sink": {
											"name": "scheduledend",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "regardingobjectid",
											"type": "Guid"
										},
										"sink": {
											"name": "regardingobjectid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "actualdurationminutes",
											"type": "Int32"
										},
										"sink": {
											"name": "actualdurationminutes",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "ownerid",
											"type": "Guid"
										},
										"sink": {
											"name": "ownerid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "prioritycode",
											"type": "Int32"
										},
										"sink": {
											"name": "prioritycode",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "modifiedon",
											"type": "DateTime"
										},
										"sink": {
											"name": "modifiedon",
											"type": "DateTime"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DataverseEmails",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetEmails",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set OK_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set KO_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set Actividad_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK_copy1",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							},
							{
								"activity": "Set KO_copy1",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": "Copy Parquet Emails"
						}
					},
					{
						"name": "LogCopyParquetAccounts",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{'RAW'}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StartProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"StartProcess": {
						"type": "String"
					},
					"Fase": {
						"type": "String",
						"defaultValue": "RAW"
					},
					"Actividad": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					}
				},
				"folder": {
					"name": "0 DataverseToParquet"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-24T17:29:20Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ParquetEmails')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]",
				"[concat(variables('workspaceId'), '/datasets/DataverseEmails')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataverseToParquetGoal1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete Parket Goals",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "StartProcess",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ParquetGoals",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "*.parquet",
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "StartProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							},
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": "Delete Paquet Goals"
						}
					},
					{
						"name": "LogDelete",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{'RAW'}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StartProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Delete Parket Goals",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Delete Parket Goals",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "StartProcess_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LogDelete",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "StartProcess_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CommonDataServiceForAppsSource",
								"query": "<fetch>\n<entity name=\"goal\">\n<attribute name=\"goalenddate\"/>\n<attribute name=\"targetmoney\"/>\n<attribute name=\"targetinteger\"/>\n<attribute name=\"statuscode\"/>\n<attribute name=\"metricid\"/>\n<attribute name=\"goalstartdate\"/>\n<attribute name=\"goalid\"/>\n<attribute name=\"isamount\"/>\n<attribute name=\"modifiedon\"/>\n<filter type='and'>\n<condition attribute=\"statecode\" value=\"0\" operator=\"eq\"/>\n<!--<condition attribute='modifiedon' operator='yesterday'/> -->\n</filter>\n</entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "transactioncurrencyid",
											"type": "Guid"
										},
										"sink": {
											"name": "transactioncurrencyid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "modifiedon",
											"type": "DateTime"
										},
										"sink": {
											"name": "modifiedon",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "targetinteger",
											"type": "Int32"
										},
										"sink": {
											"name": "targetinteger",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "goalenddate",
											"type": "DateTime"
										},
										"sink": {
											"name": "goalenddate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "targetmoney",
											"type": "Decimal"
										},
										"sink": {
											"name": "targetmoney",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "goalstartdate",
											"type": "DateTime"
										},
										"sink": {
											"name": "goalstartdate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "isamount",
											"type": "Boolean"
										},
										"sink": {
											"name": "isamount",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "statuscode",
											"type": "Int32"
										},
										"sink": {
											"name": "statuscode",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "goalid",
											"type": "Guid"
										},
										"sink": {
											"name": "goalid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "metricid",
											"type": "Guid"
										},
										"sink": {
											"name": "metricid",
											"type": "Guid"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DataverseGoals",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetGoals",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set OK_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set KO_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set Actividad_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK_copy1",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							},
							{
								"activity": "Set KO_copy1",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": "Copy Parquet Goals"
						}
					},
					{
						"name": "LogCopyParquetAccounts",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{'RAW'}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StartProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"StartProcess": {
						"type": "String"
					},
					"Fase": {
						"type": "String",
						"defaultValue": "RAW"
					},
					"Actividad": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					}
				},
				"folder": {
					"name": "0 DataverseToParquet"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-30T17:30:47Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ParquetGoals')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]",
				"[concat(variables('workspaceId'), '/datasets/DataverseGoals')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataverseToParquetLeads1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete Parket Leads",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "StartProcess",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ParquetLeads",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "*.parquet",
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "StartProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							},
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": "Delete Paquet Leads"
						}
					},
					{
						"name": "LogDelete",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{'RAW'}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StartProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Delete Parket Leads",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Delete Parket Leads",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "StartProcess_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LogDelete",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "StartProcess_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CommonDataServiceForAppsSource",
								"query": "<fetch>\n<entity name='lead'>\n<attribute name='cra83_territoryid'/>\n<attribute name='statuscode'/>\n<attribute name='leadqualitycode'/>\n<attribute name='numberofemployees'/>\n<attribute name='industrycode'/>\n<attribute name='revenue'/>\n<attribute name='modifiedon'/>\n<attribute name='createdon'/>\n<attribute name='cra83_productoid'/>\n<attribute name='leadsourcecode'/>\n<attribute name='ownerid'/>\n<attribute name='leadid'/>\n<attribute name='createdon'/>\n<!--<filter type='and'>-->\n<!--<condition attribute='modifiedon' operator='yesterday'/> -->\n<!--</filter>-->\n</entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "cra83_productoid",
											"type": "Guid"
										},
										"sink": {
											"name": "cra83_productoid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "revenue",
											"type": "Decimal"
										},
										"sink": {
											"name": "revenue",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "leadid",
											"type": "Guid"
										},
										"sink": {
											"name": "leadid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "cra83_territoryid",
											"type": "Guid"
										},
										"sink": {
											"name": "cra83_territoryid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "industrycode",
											"type": "Int32"
										},
										"sink": {
											"name": "industrycode",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "numberofemployees",
											"type": "Int32"
										},
										"sink": {
											"name": "numberofemployees",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "statuscode",
											"type": "Int32"
										},
										"sink": {
											"name": "statuscode",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "leadsourcecode",
											"type": "Int32"
										},
										"sink": {
											"name": "leadsourcecode",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "ownerid",
											"type": "Guid"
										},
										"sink": {
											"name": "ownerid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "modifiedon",
											"type": "DateTime"
										},
										"sink": {
											"name": "modifiedon",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "leadqualitycode",
											"type": "Int32"
										},
										"sink": {
											"name": "leadqualitycode",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "createdon",
											"type": "DateTime"
										},
										"sink": {
											"name": "createdon",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "transactioncurrencyid",
											"type": "Guid"
										},
										"sink": {
											"name": "transactioncurrencyid",
											"type": "Guid"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DataverseLeads",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetLeads",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set OK_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set KO_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set Actividad_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK_copy1",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							},
							{
								"activity": "Set KO_copy1",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": "Copy Parquet Leads"
						}
					},
					{
						"name": "LogCopyParquetAccounts",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{'RAW'}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StartProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"StartProcess": {
						"type": "String"
					},
					"Fase": {
						"type": "String",
						"defaultValue": "RAW"
					},
					"Actividad": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					}
				},
				"folder": {
					"name": "0 DataverseToParquet"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-31T11:03:11Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ParquetLeads')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]",
				"[concat(variables('workspaceId'), '/datasets/DataverseLeads')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataverseToParquetOpportunities1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete Parket Opportunities",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "StartProcess",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ParquetOpportunity",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "*.parquet",
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "StartProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							},
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": "Delete Paquet Opportunities"
						}
					},
					{
						"name": "LogDelete",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{'RAW'}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StartProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Delete Parket Opportunities",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Delete Parket Opportunities",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "StartProcess_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LogDelete",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "StartProcess_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CommonDataServiceForAppsSource",
								"query": "<fetch>\n<entity name=\"opportunity\">\n<attribute name=\"statuscode\"/>\n<attribute name=\"opportunityratingcode\"/>\n<attribute name=\"purchasetimeframe\"/>\n<attribute name=\"closeprobability\"/>\n<attribute name=\"originatingleadid\"/>\n<attribute name=\"modifiedon\"/>\n<attribute name=\"createdon\"/>\n<attribute name=\"parentaccountid\"/>\n<attribute name=\"ownerid\"/>\n<attribute name=\"opportunityid\"/>\n<filter type=\"and\">\n<!--<condition attribute=\"modifiedon\" operator=\"yesterday\"/>-->\n</filter>\n</entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "parentaccountid",
											"type": "Guid"
										},
										"sink": {
											"name": "parentaccountid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "originatingleadid",
											"type": "Guid"
										},
										"sink": {
											"name": "originatingleadid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "purchasetimeframe",
											"type": "Int32"
										},
										"sink": {
											"name": "purchasetimeframe",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "statuscode",
											"type": "Int32"
										},
										"sink": {
											"name": "statuscode",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "opportunityratingcode",
											"type": "Int32"
										},
										"sink": {
											"name": "opportunityratingcode",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "ownerid",
											"type": "Guid"
										},
										"sink": {
											"name": "ownerid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "modifiedon",
											"type": "DateTime"
										},
										"sink": {
											"name": "modifiedon",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "closeprobability",
											"type": "Int32"
										},
										"sink": {
											"name": "closeprobability",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "createdon",
											"type": "DateTime"
										},
										"sink": {
											"name": "createdon",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "opportunityid",
											"type": "Guid"
										},
										"sink": {
											"name": "opportunityid",
											"type": "Guid"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DataverseOpportunities",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetOpportunity",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set OK_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set KO_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set Actividad_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK_copy1",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							},
							{
								"activity": "Set KO_copy1",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": "Copy Parquet Opportunities"
						}
					},
					{
						"name": "LogCopyParquetAccounts",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{'RAW'}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StartProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"StartProcess": {
						"type": "String"
					},
					"Fase": {
						"type": "String",
						"defaultValue": "RAW"
					},
					"Actividad": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					}
				},
				"folder": {
					"name": "0 DataverseToParquet"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-24T17:29:34Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ParquetOpportunity')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]",
				"[concat(variables('workspaceId'), '/datasets/DataverseOpportunities')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataverseToParquetOpportunityProducts1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete Parket OpportunityProducts",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "StartProcess",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ParquetOpportunityProduct",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "*.parquet",
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "StartProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							},
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": "Delete Parquet OpportunityProducts"
						}
					},
					{
						"name": "LogDelete",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{'RAW'}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StartProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Delete Parket OpportunityProducts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Delete Parket OpportunityProducts",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "StartProcess_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LogDelete",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "StartProcess_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CommonDataServiceForAppsSource",
								"query": "<fetch>\n<entity name=\"opportunityproduct\">\n<attribute name=\"productid\"/>\n<attribute name=\"priceperunit\"/>\n<attribute name=\"quantity\"/>\n<attribute name=\"extendedamount\"/>\n<attribute name=\"opportunityproductid\"/>\n<attribute name=\"opportunityid\"/>\n<attribute name=\"modifiedon\"/>\n<filter type=\"and\">\n<!--<condition attribute=\"modifiedon\" operator=\"yesterday\"/>-->\n</filter>\n</entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "productid",
											"type": "Guid"
										},
										"sink": {
											"name": "productid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "transactioncurrencyid",
											"type": "Guid"
										},
										"sink": {
											"name": "transactioncurrencyid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "extendedamount",
											"type": "Decimal"
										},
										"sink": {
											"name": "extendedamount",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "priceperunit",
											"type": "Decimal"
										},
										"sink": {
											"name": "priceperunit",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "modifiedon",
											"type": "DateTime"
										},
										"sink": {
											"name": "modifiedon",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "quantity",
											"type": "Decimal"
										},
										"sink": {
											"name": "quantity",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "opportunityproductid",
											"type": "Guid"
										},
										"sink": {
											"name": "opportunityproductid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "opportunityid",
											"type": "Guid"
										},
										"sink": {
											"name": "opportunityid",
											"type": "Guid"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DataverseOpportunityProducts",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetOpportunityProduct",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set OK_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set KO_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set Actividad_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK_copy1",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							},
							{
								"activity": "Set KO_copy1",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": "Copy Parquet OpportunityProducts"
						}
					},
					{
						"name": "LogCopyParquetAccounts",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{'RAW'}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StartProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"StartProcess": {
						"type": "String"
					},
					"Fase": {
						"type": "String",
						"defaultValue": "RAW"
					},
					"Actividad": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					}
				},
				"folder": {
					"name": "0 DataverseToParquet"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-24T17:29:42Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ParquetOpportunityProduct')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]",
				"[concat(variables('workspaceId'), '/datasets/DataverseOpportunityProducts')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataverseToParquetPhoneCalls1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete Parket PhoneCalls",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "StartProcess",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ParquetPhoneCall",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "*.parquet",
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "StartProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							},
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": "Delete Parquet PhoneCalls"
						}
					},
					{
						"name": "LogDelete",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{'RAW'}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StartProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Delete Parket PhoneCalls",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Delete Parket PhoneCalls",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "StartProcess_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LogDelete",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "StartProcess_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CommonDataServiceForAppsSource",
								"query": "<fetch>\n<entity name=\"phonecall\">\n<attribute name=\"subject\"/>\n<attribute name=\"statuscode\"/>\n<attribute name=\"regardingobjectid\"/>\n<attribute name=\"prioritycode\"/>\n<attribute name=\"ownerid\"/>\n<attribute name=\"modifiedon\"/>\n<attribute name=\"actualdurationminutes\"/>\n<attribute name=\"scheduledend\"/>\n<attribute name=\"directioncode\"/>\n<attribute name=\"activityid\"/>\n<filter type=\"and\">\n<!--<condition attribute=\"modifiedon\" operator=\"yesterday\"/>-->\n</filter>\n</entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "activityid",
											"type": "Guid"
										},
										"sink": {
											"name": "activityid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "directioncode",
											"type": "Boolean"
										},
										"sink": {
											"name": "directioncode",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "statuscode",
											"type": "Int32"
										},
										"sink": {
											"name": "statuscode",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "subject",
											"type": "String"
										},
										"sink": {
											"name": "subject",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "scheduledend",
											"type": "DateTime"
										},
										"sink": {
											"name": "scheduledend",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "regardingobjectid",
											"type": "Guid"
										},
										"sink": {
											"name": "regardingobjectid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "actualdurationminutes",
											"type": "Int32"
										},
										"sink": {
											"name": "actualdurationminutes",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "ownerid",
											"type": "Guid"
										},
										"sink": {
											"name": "ownerid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "prioritycode",
											"type": "Int32"
										},
										"sink": {
											"name": "prioritycode",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "modifiedon",
											"type": "DateTime"
										},
										"sink": {
											"name": "modifiedon",
											"type": "DateTime"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DataversePhoneCalls",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetPhoneCall",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set OK_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set KO_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set Actividad_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK_copy1",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							},
							{
								"activity": "Set KO_copy1",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": "Copy Parquet PhoneCalls"
						}
					},
					{
						"name": "LogCopyParquetAccounts",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{'RAW'}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StartProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"StartProcess": {
						"type": "String"
					},
					"Fase": {
						"type": "String",
						"defaultValue": "RAW"
					},
					"Actividad": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					}
				},
				"folder": {
					"name": "0 DataverseToParquet"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-25T06:02:00Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ParquetPhoneCall')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]",
				"[concat(variables('workspaceId'), '/datasets/DataversePhoneCalls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataverseToParquetProductFamilies1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete Parket ProductFamilies",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "StartProcess",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ParquetProductFamily",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "*.parquet",
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "StartProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							},
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": "Delete Parquet ProductFamilies"
						}
					},
					{
						"name": "LogDelete",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{'RAW'}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StartProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Delete Parket ProductFamilies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Delete Parket ProductFamilies",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "StartProcess_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LogDelete",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "StartProcess_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CommonDataServiceForAppsSource",
								"query": "<fetch>\n<entity name=\"product\">\n<attribute name=\"name\"/>\n<attribute name=\"productid\"/>\n<attribute name=\"productnumber\"/>\n<attribute name=\"productstructure\"/>\n<attribute name=\"modifiedon\"/>\n<filter type=\"and\">\n<condition attribute=\"productnumber\" value=\"F%\" operator=\"like\"/>\n<condition attribute=\"parentproductid\" operator=\"null\"/>\n<condition attribute=\"name\" value=\"TFM%\" operator=\"like\"/>\n<!--<condition attribute=\"modifiedon\" operator=\"yesterday\"/>-->\n</filter>\n</entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "name",
											"type": "String"
										},
										"sink": {
											"name": "name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "productid",
											"type": "Guid"
										},
										"sink": {
											"name": "productid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "productnumber",
											"type": "String"
										},
										"sink": {
											"name": "productnumber",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "productstructure",
											"type": "Int32"
										},
										"sink": {
											"name": "productstructure",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "modifiedon",
											"type": "DateTime"
										},
										"sink": {
											"name": "modifiedon",
											"type": "DateTime"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DataverseProducts",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetProductFamily",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set OK_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set KO_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set Actividad_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK_copy1",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							},
							{
								"activity": "Set KO_copy1",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": "Copy Parquet ProductFamilies"
						}
					},
					{
						"name": "LogCopyParquetAccounts",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{'RAW'}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StartProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"StartProcess": {
						"type": "String"
					},
					"Fase": {
						"type": "String",
						"defaultValue": "RAW"
					},
					"Actividad": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					}
				},
				"folder": {
					"name": "0 DataverseToParquet"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-31T06:13:49Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ParquetProductFamily')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]",
				"[concat(variables('workspaceId'), '/datasets/DataverseProducts')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataverseToParquetProducts1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete Parket Products",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "StartProcess",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ParquetProduct",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "*.parquet",
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "StartProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							},
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": "Delete Parquet Products"
						}
					},
					{
						"name": "LogDelete",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{'RAW'}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StartProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Delete Parket Products",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Delete Parket Products",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "StartProcess_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LogDelete",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "StartProcess_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CommonDataServiceForAppsSource",
								"query": "<fetch>\n<entity name=\"product\">\n<attribute name=\"name\"/>\n<attribute name=\"productid\"/>\n<attribute name=\"productnumber\"/>\n<attribute name=\"parentproductid\"/>\n<attribute name=\"standardcost\"/>\n<attribute name=\"modifiedon\"/>\n\n<filter type=\"and\">\n<condition attribute=\"productnumber\" value=\"P%\" operator=\"like\"/>\n<condition attribute=\"name\" value=\"TFM%\" operator=\"like\"/>\n<condition attribute=\"parentproductid\" operator=\"not-null\"/>\n<!--<condition attribute=\"modifiedon\" operator=\"yesterday\"/>-->\n</filter>\n</entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "productnumber",
											"type": "String"
										},
										"sink": {
											"name": "productnumber",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "productid",
											"type": "Guid"
										},
										"sink": {
											"name": "productid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "transactioncurrencyid",
											"type": "Guid"
										},
										"sink": {
											"name": "transactioncurrencyid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "modifiedon",
											"type": "DateTime"
										},
										"sink": {
											"name": "modifiedon",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "standardcost",
											"type": "Decimal"
										},
										"sink": {
											"name": "standardcost",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "parentproductid",
											"type": "Guid"
										},
										"sink": {
											"name": "parentproductid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String"
										},
										"sink": {
											"name": "name",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DataverseProducts",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetProduct",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set OK_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set KO_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set Actividad_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK_copy1",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							},
							{
								"activity": "Set KO_copy1",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": "Copy Parquet Products"
						}
					},
					{
						"name": "LogCopyParquetAccounts",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{'RAW'}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StartProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"StartProcess": {
						"type": "String"
					},
					"Fase": {
						"type": "String",
						"defaultValue": "RAW"
					},
					"Actividad": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					}
				},
				"folder": {
					"name": "0 DataverseToParquet"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-31T07:54:15Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ParquetProduct')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]",
				"[concat(variables('workspaceId'), '/datasets/DataverseProducts')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataverseToParquetSystemManagers1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete Parket SystemManagers",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "StartProcess",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ParquetSystemManagers",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "*.parquet",
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "StartProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							},
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": "Delete Parquet Managers"
						}
					},
					{
						"name": "LogDelete",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{'RAW'}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StartProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Delete Parket SystemManagers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Delete Parket SystemManagers",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "StartProcess_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LogDelete",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "StartProcess_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CommonDataServiceForAppsSource",
								"query": "<fetch >\n<entity name=\"systemuser\">\n<attribute name=\"fullname\"/>\n<attribute name=\"systemuserid\"/>\n<attribute name=\"parentsystemuserid\"/>\n<attribute name=\"modifiedon\"/>\n<filter type=\"and\">\n<condition attribute=\"fullname\" value=\"00%\" operator=\"like\"/>\n<!--<condition attribute=\"parentsystemuserid\" operator=\"not-null\"/>-->\n<!--<condition attribute='modifiedon' operator='yesterday'/> -->\n</filter>\n</entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "fullname",
											"type": "String"
										},
										"sink": {
											"name": "fullname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "systemuserid",
											"type": "Guid"
										},
										"sink": {
											"name": "systemuserid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "modifiedon",
											"type": "DateTime"
										},
										"sink": {
											"name": "modifiedon",
											"type": "DateTime"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DataverseSystemUsers",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetSystemManagers",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set OK_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set KO_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set Actividad_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK_copy1",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							},
							{
								"activity": "Set KO_copy1",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": "Copy Parquet SystemManagers"
						}
					},
					{
						"name": "LogCopyParquetAccounts",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{'RAW'}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StartProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"StartProcess": {
						"type": "String"
					},
					"Fase": {
						"type": "String",
						"defaultValue": "RAW"
					},
					"Actividad": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					}
				},
				"folder": {
					"name": "0 DataverseToParquet"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-29T05:56:59Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ParquetSystemManagers')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]",
				"[concat(variables('workspaceId'), '/datasets/DataverseSystemUsers')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataverseToParquetSystemusers1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete Parket SystemUsers",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "StartProcess",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ParquetSystemUsers",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "*.parquet",
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "StartProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							},
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": "Delete Parquet Users"
						}
					},
					{
						"name": "LogDelete",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{'RAW'}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StartProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Delete Parket SystemUsers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Delete Parket SystemUsers",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "StartProcess_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LogDelete",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "StartProcess_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CommonDataServiceForAppsSource",
								"query": "<fetch >\n<entity name=\"systemuser\">\n<attribute name=\"fullname\"/>\n<attribute name=\"systemuserid\"/>\n<attribute name=\"parentsystemuserid\"/>\n<attribute name =\"modifiedon\"/>\n<filter type=\"and\">\n<condition attribute=\"fullname\" value=\"0 A%\" operator=\"like\"/>\n<!--<condition attribute='modifiedon' operator='yesterday'/> -->\n</filter>\n</entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "fullname",
											"type": "String"
										},
										"sink": {
											"name": "fullname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "systemuserid",
											"type": "Guid"
										},
										"sink": {
											"name": "systemuserid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "parentsystemuserid",
											"type": "Guid"
										},
										"sink": {
											"name": "parentsystemuserid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "modifiedon",
											"type": "DateTime"
										},
										"sink": {
											"name": "modifiedon",
											"type": "DateTime"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DataverseSystemUsers",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetSystemUsers",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set OK_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set KO_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set Actividad_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK_copy1",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							},
							{
								"activity": "Set KO_copy1",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": "Copy Parquet SystemUsers"
						}
					},
					{
						"name": "LogCopyParquetAccounts",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{'RAW'}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StartProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"StartProcess": {
						"type": "String"
					},
					"Fase": {
						"type": "String",
						"defaultValue": "RAW"
					},
					"Actividad": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					}
				},
				"folder": {
					"name": "0 DataverseToParquet"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-27T05:28:54Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ParquetSystemUsers')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]",
				"[concat(variables('workspaceId'), '/datasets/DataverseSystemUsers')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataverseToParquetTask1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete Parket Tasks",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "StartProcess",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ParquetTask",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "*.parquet",
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "StartProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							},
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": "Delete Parquet Tasks"
						}
					},
					{
						"name": "LogDelete",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{'RAW'}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StartProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Delete Parket Tasks",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Delete Parket Tasks",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "StartProcess_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LogDelete",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "StartProcess_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CommonDataServiceForAppsSource",
								"query": "<fetch>\n<entity name=\"task\">\n<attribute name=\"subject\"/>\n<attribute name=\"statuscode\"/>\n<attribute name=\"regardingobjectid\"/>\n<attribute name=\"prioritycode\"/>\n<attribute name=\"ownerid\"/>\n<attribute name=\"modifiedon\"/>\n<attribute name=\"actualdurationminutes\"/>\n<attribute name=\"scheduledend\"/>\n<attribute name=\"activityid\"/>\n<filter type=\"and\">\n<!--<condition attribute=\"modifiedon\" operator=\"yesterday\"/>-->\n</filter>\n</entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "activityid",
											"type": "Guid"
										},
										"sink": {
											"name": "activityid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "statuscode",
											"type": "Int32"
										},
										"sink": {
											"name": "statuscode",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "subject",
											"type": "String"
										},
										"sink": {
											"name": "subject",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "scheduledend",
											"type": "DateTime"
										},
										"sink": {
											"name": "scheduledend",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "regardingobjectid",
											"type": "Guid"
										},
										"sink": {
											"name": "regardingobjectid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "actualdurationminutes",
											"type": "Int32"
										},
										"sink": {
											"name": "actualdurationminutes",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "ownerid",
											"type": "Guid"
										},
										"sink": {
											"name": "ownerid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "prioritycode",
											"type": "Int32"
										},
										"sink": {
											"name": "prioritycode",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "modifiedon",
											"type": "DateTime"
										},
										"sink": {
											"name": "modifiedon",
											"type": "DateTime"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DataverseTasks",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetTask",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set OK_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set KO_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set Actividad_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK_copy1",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							},
							{
								"activity": "Set KO_copy1",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": "Copy Parquet Task"
						}
					},
					{
						"name": "LogCopyParquetAccounts",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{'RAW'}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StartProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"StartProcess": {
						"type": "String"
					},
					"Fase": {
						"type": "String",
						"defaultValue": "RAW"
					},
					"Actividad": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					}
				},
				"folder": {
					"name": "0 DataverseToParquet"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-24T18:32:50Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ParquetTask')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]",
				"[concat(variables('workspaceId'), '/datasets/DataverseTasks')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataverseToParquetTerritories1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete Parket Territories",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "StartProcess",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ParquetTerritories",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "*.parquet",
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "StartProcess",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Actividad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set KO",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							},
							{
								"activity": "Set OK",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": "Delete Parquet Territories"
						}
					},
					{
						"name": "LogDelete",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{'RAW'}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StartProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set OK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Delete Parket Territories",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set KO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Delete Parket Territories",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "StartProcess_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LogDelete",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartProcess",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "StartProcess_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CommonDataServiceForAppsSource",
								"query": "<fetch>\n<entity name='territory'>\n<attribute name=\"name\"/>\n<attribute name=\"territoryid\"/>\n<attribute name=\"parentterritoryid\"/>\n<attribute name=\"modifiedon\"/>\n<!--<filter type='and'>-->\n<!--<condition attribute='modifiedon' operator='yesterday'/> -->\n<!--</filter>-->\n</entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "name",
											"type": "String"
										},
										"sink": {
											"name": "name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "territoryid",
											"type": "Guid"
										},
										"sink": {
											"name": "territoryid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "modifiedon",
											"type": "DateTime"
										},
										"sink": {
											"name": "modifiedon",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "parentterritoryid",
											"type": "Guid"
										},
										"sink": {
											"name": "parentterritoryid",
											"type": "Guid"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DataverseTerritories",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetTerritories",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set OK_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set KO_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Estatus",
							"value": "OK"
						}
					},
					{
						"name": "Set Actividad_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set OK_copy1",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							},
							{
								"activity": "Set KO_copy1",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Actividad",
							"value": "Copy Parquet Territories"
						}
					},
					{
						"name": "LogCopyParquetAccounts",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set Actividad_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RecLog",
								"type": "DataFlowReference",
								"parameters": {
									"Fase": {
										"value": "'@{'RAW'}'",
										"type": "Expression"
									},
									"Pipeline": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"StarProcess": {
										"value": "'@{formatDateTime(variables('StartProcess'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"EndProcess": {
										"value": "'@{formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									},
									"Estatus": {
										"value": "'@{variables('Estatus')}'",
										"type": "Expression"
									},
									"Mensaje": {
										"value": "'@{variables('Actividad')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"StartProcess": {
						"type": "String"
					},
					"Fase": {
						"type": "String",
						"defaultValue": "RAW"
					},
					"Actividad": {
						"type": "String"
					},
					"Estatus": {
						"type": "String"
					}
				},
				"folder": {
					"name": "0 DataverseToParquet"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-30T05:27:24Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ParquetTerritories')]",
				"[concat(variables('workspaceId'), '/dataflows/RecLog')]",
				"[concat(variables('workspaceId'), '/datasets/DataverseTerritories')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DWH_Accounts')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWH",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "3 DWH"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SK_accountid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HASHKEY",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "name",
						"type": "varchar"
					},
					{
						"name": "ownerid",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "orignatingleadid",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "renevue",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "numberofemployees",
						"type": "int",
						"precision": 10
					},
					{
						"name": "territoryid",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "industrycode",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "modifiedon",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "createdon",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Accounts_DWH"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/DWH')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DWH_Goals')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWH",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "3 DWH"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SK_goalid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HASHKEY",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "goalstar",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "goalend",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "targetmoney",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "targetinteger",
						"type": "int",
						"precision": 10
					},
					{
						"name": "isamount",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "goals_DWH"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/DWH')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DWH_Leads')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWH",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "3 DWH"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SK_leadid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "createdon",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ownwer",
						"type": "int",
						"precision": 10
					},
					{
						"name": "leadsource",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "statuscode",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "industry",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "modifiedon",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "territory",
						"type": "int",
						"precision": 10
					},
					{
						"name": "product",
						"type": "int",
						"precision": 10
					},
					{
						"name": "rating",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "employees",
						"type": "int",
						"precision": 10
					},
					{
						"name": "revenue",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "haskey",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "leads_DWH"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/DWH')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DWH_Opportunities')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWH",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "3 DWH"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SK_opportunityid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HASHKEY",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "ownerid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "parentaccountid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "orignatingleadid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "closeprobability",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "modifiedon",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "createdon",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "purchasetimeframe",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "opportunityratingcode",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "status",
						"type": "tinyint",
						"precision": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Oppotunities_DWH"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/DWH')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DWH_OpportunityProducts')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWH",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "3 DWH"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SK_opportunityproductid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HASHKEY",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "SK oportunityid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SK_productid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "amount",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "priceunit",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "modifiedon",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "opportunityproducts_DWH"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/DWH')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DWH_ProductFamilies')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWH",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "3 DWH"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SK_productfamilyid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HASHKEY",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "productnumber",
						"type": "varchar"
					},
					{
						"name": "productname",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "productsfamilies_DWH"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/DWH')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DWH_Products')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWH",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "3 DWH"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SK_productid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HASHKEY",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "productnumber",
						"type": "varchar"
					},
					{
						"name": "productname",
						"type": "varchar"
					},
					{
						"name": "SK_family",
						"type": "int",
						"precision": 10
					},
					{
						"name": "standarcost",
						"type": "money",
						"precision": 19,
						"scale": 4
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "products_DWH"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/DWH')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DWH_SystemManagers')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWH",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "3 DWH"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SK_systemusermanagerid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HASHKEY",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fullname",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "systemusersmanagers_DWH"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/DWH')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DWH_SystemUsers')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWH",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "3 DWH"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SK_systemuserid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HASHKEY",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fullname",
						"type": "varchar"
					},
					{
						"name": "manager",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "systemusers_DWH"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/DWH')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DWH_Territories')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWH",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "3 DWH"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SK_territoryid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HASHKEY",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "territoryname",
						"type": "varchar"
					},
					{
						"name": "SK_parentterritory",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "territories_DWH"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/DWH')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataverseAccounts')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Dataverse_CRM1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "0 Dataverse"
				},
				"annotations": [],
				"type": "CommonDataServiceForAppsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "account"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Dataverse_CRM1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataverseAppointments')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Dataverse_CRM1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "0 Dataverse"
				},
				"annotations": [],
				"type": "CommonDataServiceForAppsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "appointment"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Dataverse_CRM1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataverseEmails')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Dataverse_CRM1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "0 Dataverse"
				},
				"annotations": [],
				"type": "CommonDataServiceForAppsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "email"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Dataverse_CRM1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataverseGoals')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Dataverse_CRM1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "0 Dataverse"
				},
				"annotations": [],
				"type": "CommonDataServiceForAppsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "goal"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Dataverse_CRM1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataverseLeads')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Dataverse_CRM1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "0 Dataverse"
				},
				"annotations": [],
				"type": "CommonDataServiceForAppsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "lead"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Dataverse_CRM1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataverseOpportunities')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Dataverse_CRM1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "0 Dataverse"
				},
				"annotations": [],
				"type": "CommonDataServiceForAppsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "opportunity"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Dataverse_CRM1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataverseOpportunityProducts')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Dataverse_CRM1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "0 Dataverse"
				},
				"annotations": [],
				"type": "CommonDataServiceForAppsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "opportunityproduct"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Dataverse_CRM1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataversePhoneCalls')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Dataverse_CRM1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "0 Dataverse"
				},
				"annotations": [],
				"type": "CommonDataServiceForAppsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "phonecall"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Dataverse_CRM1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataverseProducts')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Dataverse_CRM1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "0 Dataverse"
				},
				"annotations": [],
				"type": "CommonDataServiceForAppsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "product"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Dataverse_CRM1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataverseSystemUsers')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Dataverse_CRM1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "0 Dataverse"
				},
				"annotations": [],
				"type": "CommonDataServiceForAppsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "systemuser"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Dataverse_CRM1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataverseTasks')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Dataverse_CRM1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "0 Dataverse"
				},
				"annotations": [],
				"type": "CommonDataServiceForAppsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "task"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Dataverse_CRM1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataverseTerritories')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Dataverse_CRM1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "0 Dataverse"
				},
				"annotations": [],
				"type": "CommonDataServiceForAppsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "territory"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Dataverse_CRM1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Logs')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MetadataLogs",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Fase",
						"type": "varchar"
					},
					{
						"name": "Pipeline",
						"type": "nvarchar"
					},
					{
						"name": "StartProcess",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EndProcess",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Estatus",
						"type": "nvarchar"
					},
					{
						"name": "Mensaje",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "logs"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/MetadataLogs')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ParquetAccountsOk')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "rmldatalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "1 Parquet"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "accounts",
						"fileSystem": "files"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "originatingleadid",
						"type": "UTF8"
					},
					{
						"name": "revenue",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "industrycode",
						"type": "INT32"
					},
					{
						"name": "numberofemployees",
						"type": "INT32"
					},
					{
						"name": "accountid",
						"type": "UTF8"
					},
					{
						"name": "transactioncurrencyid",
						"type": "UTF8"
					},
					{
						"name": "ownerid",
						"type": "UTF8"
					},
					{
						"name": "modifiedon",
						"type": "INT96"
					},
					{
						"name": "territoryid",
						"type": "UTF8"
					},
					{
						"name": "createdon",
						"type": "INT96"
					},
					{
						"name": "name",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/rmldatalake')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ParquetAppointments')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "rmldatalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "1 Parquet"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "appointments",
						"fileSystem": "files"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/rmldatalake')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ParquetEmails')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "rmldatalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "1 Parquet"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "emails",
						"fileSystem": "files"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/rmldatalake')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ParquetGoals')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "rmldatalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "1 Parquet"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "goals",
						"fileSystem": "files"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/rmldatalake')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ParquetLeads')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "rmldatalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "1 Parquet"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "leads",
						"fileSystem": "files"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "cra83_productoid",
						"type": "UTF8"
					},
					{
						"name": "revenue",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "leadid",
						"type": "UTF8"
					},
					{
						"name": "cra83_territoryid",
						"type": "UTF8"
					},
					{
						"name": "industrycode",
						"type": "INT32"
					},
					{
						"name": "numberofemployees",
						"type": "INT32"
					},
					{
						"name": "statuscode",
						"type": "INT32"
					},
					{
						"name": "leadsourcecode",
						"type": "INT32"
					},
					{
						"name": "ownerid",
						"type": "UTF8"
					},
					{
						"name": "modifiedon",
						"type": "INT96"
					},
					{
						"name": "leadqualitycode",
						"type": "INT32"
					},
					{
						"name": "createdon",
						"type": "INT96"
					},
					{
						"name": "transactioncurrencyid",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/rmldatalake')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ParquetOpportunity')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "rmldatalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "1 Parquet"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "opportunities",
						"fileSystem": "files"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/rmldatalake')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ParquetOpportunityProduct')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "rmldatalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "1 Parquet"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "opportunityproducts",
						"fileSystem": "files"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/rmldatalake')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ParquetPhoneCall')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "rmldatalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "1 Parquet"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "phonecalls",
						"fileSystem": "files"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "activityid",
						"type": "UTF8"
					},
					{
						"name": "directioncode",
						"type": "BOOLEAN"
					},
					{
						"name": "statuscode",
						"type": "INT32"
					},
					{
						"name": "subject",
						"type": "UTF8"
					},
					{
						"name": "scheduledend",
						"type": "INT96"
					},
					{
						"name": "regardingobjectid",
						"type": "UTF8"
					},
					{
						"name": "actualdurationminutes",
						"type": "INT32"
					},
					{
						"name": "ownerid",
						"type": "UTF8"
					},
					{
						"name": "prioritycode",
						"type": "INT32"
					},
					{
						"name": "modifiedon",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/rmldatalake')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ParquetProduct')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "rmldatalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "1 Parquet"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "products",
						"fileSystem": "files"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "productnumber",
						"type": "UTF8"
					},
					{
						"name": "productid",
						"type": "UTF8"
					},
					{
						"name": "transactioncurrencyid",
						"type": "UTF8"
					},
					{
						"name": "modifiedon",
						"type": "INT96"
					},
					{
						"name": "standardcost",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "parentproductid",
						"type": "UTF8"
					},
					{
						"name": "name",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/rmldatalake')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ParquetProductFamily')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "rmldatalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "1 Parquet"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "productfamilies",
						"fileSystem": "files"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "name",
						"type": "UTF8"
					},
					{
						"name": "productid",
						"type": "UTF8"
					},
					{
						"name": "productnumber",
						"type": "UTF8"
					},
					{
						"name": "productstructure",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/rmldatalake')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ParquetSystemManagers')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "rmldatalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "1 Parquet"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "systemusersmanagers",
						"fileSystem": "files"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "fullname",
						"type": "UTF8"
					},
					{
						"name": "systemuserid",
						"type": "UTF8"
					},
					{
						"name": "modifiedon",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/rmldatalake')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ParquetSystemUsers')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "rmldatalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "1 Parquet"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "systemusers",
						"fileSystem": "files"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "fullname",
						"type": "UTF8"
					},
					{
						"name": "systemuserid",
						"type": "UTF8"
					},
					{
						"name": "parentsystemuserid",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/rmldatalake')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ParquetTask')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "rmldatalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "1 Parquet"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "tasks",
						"fileSystem": "files"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/rmldatalake')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ParquetTerritories')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "rmldatalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "1 Parquet"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "territories",
						"fileSystem": "files"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "name",
						"type": "UTF8"
					},
					{
						"name": "territoryid",
						"type": "UTF8"
					},
					{
						"name": "modifiedon",
						"type": "INT96"
					},
					{
						"name": "parentterritoryid",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/rmldatalake')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STG_Accounts')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "STG Base",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 STG"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SK_accountid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HASHKEY",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "BK_accountid",
						"type": "uniqueidentifier"
					},
					{
						"name": "name",
						"type": "varchar"
					},
					{
						"name": "ownerid",
						"type": "uniqueidentifier"
					},
					{
						"name": "orignatingleadid",
						"type": "uniqueidentifier"
					},
					{
						"name": "renevue",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "numberofemployees",
						"type": "int",
						"precision": 10
					},
					{
						"name": "territoryid",
						"type": "uniqueidentifier"
					},
					{
						"name": "industrycode",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "modifiedon",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "createdon",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Accounts_STG"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/STG Base')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STG_Activities')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "STG Base",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 STG"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SK_activityid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "activitytype",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HASHKEY",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "BK_activityid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ownerid",
						"type": "uniqueidentifier"
					},
					{
						"name": "regardingid",
						"type": "uniqueidentifier"
					},
					{
						"name": "duration",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "modifiedon",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "priority",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "status",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "duedate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "direction",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Activities_STG"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/STG Base')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STG_Appointment')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "STG Base",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 STG"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "activitytype",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HASHKEY",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "BK_activityid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ownerid",
						"type": "uniqueidentifier"
					},
					{
						"name": "regardingid",
						"type": "uniqueidentifier"
					},
					{
						"name": "duration",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "modifiedon",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "priority",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "status",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "duedate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Appointments_STG"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/STG Base')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STG_Emails')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "STG Base",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 STG"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "activitytype",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HASHKEY",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "BK_activityid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ownerid",
						"type": "uniqueidentifier"
					},
					{
						"name": "regardingid",
						"type": "uniqueidentifier"
					},
					{
						"name": "duration",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "modifiedon",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "priority",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "status",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "duedate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Emails_STG"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/STG Base')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STG_Goals')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "STG Base",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 STG"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SK_goalid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HASHKEY",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "BK_agoalid",
						"type": "uniqueidentifier"
					},
					{
						"name": "goalstar",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "goalend",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "targetmoney",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "targetinteger",
						"type": "int",
						"precision": 10
					},
					{
						"name": "isamount",
						"type": "bit"
					},
					{
						"name": "modifiedon",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Goals_STG"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/STG Base')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STG_Leads')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "STG Base",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 STG"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SK_leadid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BK_leadid",
						"type": "uniqueidentifier"
					},
					{
						"name": "createdon",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ownerid",
						"type": "uniqueidentifier"
					},
					{
						"name": "leadsource",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "statuscode",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "industry",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "modifiedon",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "custom_territorioid",
						"type": "uniqueidentifier"
					},
					{
						"name": "custom_productid",
						"type": "uniqueidentifier"
					},
					{
						"name": "rating",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "employees",
						"type": "int",
						"precision": 10
					},
					{
						"name": "revenue",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "HASHKEY",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "leads_STG"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/STG Base')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STG_Opportunities')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "STG Base",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 STG"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SK_opportunityid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HASHKEY",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "BK_opportunityid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ownerid",
						"type": "uniqueidentifier"
					},
					{
						"name": "parentaccountid",
						"type": "uniqueidentifier"
					},
					{
						"name": "orignatingleadid",
						"type": "uniqueidentifier"
					},
					{
						"name": "closeprobability",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "modifiedon",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "createdon",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "purchasetimeframe",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "opportunityratingcode",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "status",
						"type": "tinyint",
						"precision": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Oppotunities_STG"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/STG Base')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STG_OpportunityProducts')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "STG Base",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 STG"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SK_OpportunityProductid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HASHKEY",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "BK_OpportunityProductid",
						"type": "uniqueidentifier"
					},
					{
						"name": "productid",
						"type": "uniqueidentifier"
					},
					{
						"name": "opportunityid",
						"type": "uniqueidentifier"
					},
					{
						"name": "amount",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "priceunit",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "modifiedon",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "OpportunityProducts_STG"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/STG Base')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STG_PhoneCalls')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "STG Base",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 STG"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "activitytype",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HASHKEY",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "BK_activityid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ownerid",
						"type": "uniqueidentifier"
					},
					{
						"name": "regardingid",
						"type": "uniqueidentifier"
					},
					{
						"name": "duration",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "direction",
						"type": "bit"
					},
					{
						"name": "modifiedon",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "priority",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "status",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "duedate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "PhoneCalss_STG"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/STG Base')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STG_ProductFamilies')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "STG Base",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 STG"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SK_productfamilyid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HASHKEY",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "BK_productfamilyid",
						"type": "uniqueidentifier"
					},
					{
						"name": "productnumber",
						"type": "varchar"
					},
					{
						"name": "productname",
						"type": "varchar"
					},
					{
						"name": "modifiedon",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "productfamillies_STG"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/STG Base')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STG_Products')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "STG Base",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 STG"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SK_productid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HASHKEY",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "BK_productid",
						"type": "uniqueidentifier"
					},
					{
						"name": "productnumber",
						"type": "varchar"
					},
					{
						"name": "productname",
						"type": "varchar"
					},
					{
						"name": "BK_family",
						"type": "uniqueidentifier"
					},
					{
						"name": "standarcost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "modifiedon",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "products_STG"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/STG Base')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STG_SystemUsers')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "STG Base",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 STG"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SK_systemuserid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HASHKEY",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "BK_systemuserid",
						"type": "uniqueidentifier"
					},
					{
						"name": "fullname",
						"type": "varchar"
					},
					{
						"name": "parentsystemuserid",
						"type": "uniqueidentifier"
					},
					{
						"name": "modifiedon",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "systemusers_STG"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/STG Base')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STG_SystemUsersManagers')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "STG Base",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 STG"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SK_systemusermanagerid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HASHKEY",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "BK_systemusermanagerid",
						"type": "uniqueidentifier"
					},
					{
						"name": "fullname",
						"type": "varchar"
					},
					{
						"name": "modifiedon",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "systemusersmanagers_STG"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/STG Base')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STG_Tasks')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "STG Base",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 STG"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "activitytype",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HASHKEY",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "BK_activityid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ownerid",
						"type": "uniqueidentifier"
					},
					{
						"name": "regardingid",
						"type": "uniqueidentifier"
					},
					{
						"name": "duration",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "direction",
						"type": "bit"
					},
					{
						"name": "modifiedon",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "priority",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "status",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "duedate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Tasks_STG"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/STG Base')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STG_Territories')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "STG Base",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 STG"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SK_territoryid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HASHKEY",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "BK_territoryid",
						"type": "uniqueidentifier"
					},
					{
						"name": "territoryname",
						"type": "varchar"
					},
					{
						"name": "parentterritory",
						"type": "varchar"
					},
					{
						"name": "modifiedon",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "territories_STG"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/STG Base')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Tablas')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MetadataLogs",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Tabla",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tablas"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/MetadataLogs')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DWH')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('DWH_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataverse_CRM1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "CommonDataServiceForApps",
				"typeProperties": {
					"deploymentType": "Online",
					"serviceUri": "https://org14605eab.crm4.dynamics.com/",
					"authenticationType": "Office365",
					"username": "[parameters('Dataverse_CRM1_properties_typeProperties_username')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('Dataverse_CRM1_password')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MetadataLogs')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('MetadataLogs_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STG Base')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('STG Base_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/rmldatalake')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('rmldatalake_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('rmldatalake_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/rmltfmworkspace-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('rmltfmworkspace-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/rmltfmworkspace-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('rmltfmworkspace-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tfmworkspace-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('tfmworkspace-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RAW_to_STG_Accounts')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "1_RAW_to_STG"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParquetAccountsOk",
								"type": "DatasetReference"
							},
							"name": "DataverseParquet"
						},
						{
							"dataset": {
								"referenceName": "STG_Accounts",
								"type": "DatasetReference"
							},
							"name": "STG"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "STG_Accounts",
								"type": "DatasetReference"
							},
							"name": "Nuevos"
						},
						{
							"dataset": {
								"referenceName": "STG_Accounts",
								"type": "DatasetReference"
							},
							"name": "Actualizaciones"
						}
					],
					"transformations": [
						{
							"name": "CrearHASH"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "Split"
						},
						{
							"name": "Insertar"
						},
						{
							"name": "Actualizar"
						}
					],
					"script": "source(output(\n\t\toriginatingleadid as string,\n\t\trevenue as decimal(38,18),\n\t\tindustrycode as integer,\n\t\tnumberofemployees as integer,\n\t\taccountid as string,\n\t\ttransactioncurrencyid as string,\n\t\townerid as string,\n\t\tmodifiedon as timestamp,\n\t\tterritoryid as string,\n\t\tcreatedon as timestamp,\n\t\tname as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> DataverseParquet\nsource(output(\n\t\tSK_accountid as integer,\n\t\tHASHKEY as long,\n\t\tBK_accountid as string,\n\t\tname as string,\n\t\townerid as string,\n\t\torignatingleadid as string,\n\t\trenevue as decimal(19,4),\n\t\tnumberofemployees as integer,\n\t\tterritoryid as string,\n\t\tindustrycode as integer,\n\t\tmodifiedon as timestamp,\n\t\tcreatedon as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> STG\nDataverseParquet derive(RAWHASH = crc32(512,upper(toString(ownerid)),toString(name),toInteger(toString(revenue),'############'),toString(numberofemployees),toString(industrycode),upper(toString(originatingleadid)),upper(toString(territoryid)))) ~> CrearHASH\nCrearHASH, STG lookup(upper(accountid) == BK_accountid,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(HASHKEY),\n\tHASHKEY != RAWHASH,\n\tdisjoint: false) ~> Split@(Nuevos, Actualizaciones, Nada)\nSplit@Nuevos alterRow(insertIf(true())) ~> Insertar\nSplit@Actualizaciones alterRow(updateIf(true())) ~> Actualizar\nInsertar sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_accountid as integer,\n\t\tHASHKEY as long,\n\t\tBK_accountid as string,\n\t\tname as string,\n\t\townerid as string,\n\t\torignatingleadid as string,\n\t\trenevue as decimal(19,4),\n\t\tnumberofemployees as integer,\n\t\tterritoryid as string,\n\t\tindustrycode as integer,\n\t\tmodifiedon as timestamp,\n\t\tcreatedon as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tHASHKEY = RAWHASH,\n\t\tBK_accountid = accountid,\n\t\tname = Split@Nuevos@name,\n\t\townerid = Split@Nuevos@ownerid,\n\t\torignatingleadid = originatingleadid,\n\t\trenevue = revenue,\n\t\tnumberofemployees = Split@Nuevos@numberofemployees,\n\t\tterritoryid = Split@Nuevos@territoryid,\n\t\tindustrycode = Split@Nuevos@industrycode,\n\t\tmodifiedon = Split@Nuevos@modifiedon,\n\t\tcreatedon = Split@Nuevos@createdon\n\t)) ~> Nuevos\nActualizar sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_accountid as integer,\n\t\tHASHKEY as long,\n\t\tBK_accountid as string,\n\t\tname as string,\n\t\townerid as string,\n\t\torignatingleadid as string,\n\t\trenevue as decimal(19,4),\n\t\tnumberofemployees as integer,\n\t\tterritoryid as string,\n\t\tindustrycode as integer,\n\t\tmodifiedon as timestamp,\n\t\tcreatedon as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tHASHKEY = RAWHASH,\n\t\tBK_accountid = accountid,\n\t\tname = Split@Actualizaciones@name,\n\t\townerid = Split@Actualizaciones@ownerid,\n\t\torignatingleadid,\n\t\trenevue = revenue,\n\t\tnumberofemployees = Split@Actualizaciones@numberofemployees,\n\t\tterritoryid = Split@Actualizaciones@territoryid,\n\t\tindustrycode = Split@Actualizaciones@industrycode,\n\t\tmodifiedon = Split@Actualizaciones@modifiedon,\n\t\tcreatedon = Split@Actualizaciones@createdon\n\t)) ~> Actualizaciones"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ParquetAccountsOk')]",
				"[concat(variables('workspaceId'), '/datasets/STG_Accounts')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RAW_to_STG_Appointment')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "1_RAW_to_STG/Acitivities"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParquetAppointments",
								"type": "DatasetReference"
							},
							"name": "DataverseParquet"
						},
						{
							"dataset": {
								"referenceName": "STG_Appointment",
								"type": "DatasetReference"
							},
							"name": "STG"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "STG_Appointment",
								"type": "DatasetReference"
							},
							"name": "Nuevos"
						},
						{
							"dataset": {
								"referenceName": "STG_Appointment",
								"type": "DatasetReference"
							},
							"name": "Actualizaciones"
						}
					],
					"transformations": [
						{
							"name": "CrearHASH"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "Split"
						},
						{
							"name": "Insertar"
						},
						{
							"name": "Actualizar"
						}
					],
					"script": "source(output(\n\t\tisalldayevent as boolean,\n\t\tactivityid as string,\n\t\tstatuscode as integer,\n\t\tsubject as string,\n\t\tscheduledend as timestamp,\n\t\tregardingobjectid as string,\n\t\tactualdurationminutes as integer,\n\t\townerid as string,\n\t\tprioritycode as integer,\n\t\tmodifiedon as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> DataverseParquet\nsource(output(\n\t\tactivitytype as integer,\n\t\tHASHKEY as long,\n\t\tBK_activityid as string,\n\t\townerid as string,\n\t\tregardingid as string,\n\t\tduration as integer,\n\t\tmodifiedon as timestamp,\n\t\tpriority as integer,\n\t\tstatus as integer,\n\t\tduedate as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> STG\nDataverseParquet derive(RAWHASH = crc32(512,toString(ownerid),toString(statuscode),toString(scheduledend),toString(prioritycode))) ~> CrearHASH\nCrearHASH, STG lookup(upper(activityid) == BK_activityid,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(HASHKEY),\n\tHASHKEY != RAWHASH,\n\tdisjoint: false) ~> Split@(Nuevos, Actualizaciones, Nada)\nSplit@Nuevos alterRow(insertIf(true())) ~> Insertar\nSplit@Actualizaciones alterRow(updateIf(true())) ~> Actualizar\nInsertar sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tactivitytype as integer,\n\t\tHASHKEY as long,\n\t\tBK_activityid as string,\n\t\townerid as string,\n\t\tregardingid as string,\n\t\tduration as integer,\n\t\tmodifiedon as timestamp,\n\t\tpriority as integer,\n\t\tstatus as integer,\n\t\tduedate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tactivitytype,\n\t\tHASHKEY = RAWHASH,\n\t\tBK_activityid = activityid,\n\t\townerid = Split@Nuevos@ownerid,\n\t\tregardingid = regardingobjectid,\n\t\tduration,\n\t\tmodifiedon = Split@Nuevos@modifiedon,\n\t\tpriority,\n\t\tstatus,\n\t\tduedate\n\t)) ~> Nuevos\nActualizar sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tactivitytype as integer,\n\t\tHASHKEY as long,\n\t\tBK_activityid as string,\n\t\townerid as string,\n\t\tregardingid as string,\n\t\tduration as integer,\n\t\tmodifiedon as timestamp,\n\t\tpriority as integer,\n\t\tstatus as integer,\n\t\tduedate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['BK_activityid'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tactivitytype,\n\t\tHASHKEY = RAWHASH,\n\t\tBK_activityid,\n\t\townerid = Split@Actualizaciones@ownerid,\n\t\tregardingid = regardingobjectid,\n\t\tduration,\n\t\tmodifiedon = Split@Actualizaciones@modifiedon,\n\t\tpriority,\n\t\tstatus,\n\t\tduedate\n\t)) ~> Actualizaciones"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ParquetAppointments')]",
				"[concat(variables('workspaceId'), '/datasets/STG_Appointment')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RAW_to_STG_Emails')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "1_RAW_to_STG/Acitivities"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParquetEmails",
								"type": "DatasetReference"
							},
							"name": "DataverseParquet"
						},
						{
							"dataset": {
								"referenceName": "STG_Emails",
								"type": "DatasetReference"
							},
							"name": "STG"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "STG_Emails",
								"type": "DatasetReference"
							},
							"name": "Nuevos"
						},
						{
							"dataset": {
								"referenceName": "STG_Emails",
								"type": "DatasetReference"
							},
							"name": "Actualizaciones"
						}
					],
					"transformations": [
						{
							"name": "CrearHASH"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "Split"
						},
						{
							"name": "Insertar"
						},
						{
							"name": "Actualizar"
						}
					],
					"script": "source(output(\n\t\tactivityid as string,\n\t\tstatuscode as integer,\n\t\tsubject as string,\n\t\tscheduledend as timestamp,\n\t\tregardingobjectid as string,\n\t\tactualdurationminutes as integer,\n\t\townerid as string,\n\t\tprioritycode as integer,\n\t\tmodifiedon as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> DataverseParquet\nsource(output(\n\t\tactivitytype as integer,\n\t\tHASHKEY as long,\n\t\tBK_activityid as string,\n\t\townerid as string,\n\t\tregardingid as string,\n\t\tduration as integer,\n\t\tmodifiedon as timestamp,\n\t\tpriority as integer,\n\t\tstatus as integer,\n\t\tduedate as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> STG\nDataverseParquet derive(RAWHASH = crc32(512,toString(ownerid),toString(statuscode),toString(scheduledend),toString(prioritycode),toString(actualdurationminutes))) ~> CrearHASH\nCrearHASH, STG lookup(upper(activityid) == BK_activityid,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(HASHKEY),\n\tHASHKEY != RAWHASH,\n\tdisjoint: false) ~> Split@(Nuevos, Actualizaciones, Nada)\nSplit@Nuevos alterRow(insertIf(true())) ~> Insertar\nSplit@Actualizaciones alterRow(updateIf(true())) ~> Actualizar\nInsertar sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tactivitytype as integer,\n\t\tHASHKEY as long,\n\t\tBK_activityid as string,\n\t\townerid as string,\n\t\tregardingid as string,\n\t\tduration as integer,\n\t\tmodifiedon as timestamp,\n\t\tpriority as integer,\n\t\tstatus as integer,\n\t\tduedate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tactivitytype,\n\t\tHASHKEY = RAWHASH,\n\t\tBK_activityid = activityid,\n\t\townerid = Split@Nuevos@ownerid,\n\t\tregardingid = regardingobjectid,\n\t\tduration,\n\t\tmodifiedon = Split@Nuevos@modifiedon,\n\t\tpriority,\n\t\tstatus,\n\t\tduedate\n\t)) ~> Nuevos\nActualizar sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tactivitytype as integer,\n\t\tHASHKEY as long,\n\t\tBK_activityid as string,\n\t\townerid as string,\n\t\tregardingid as string,\n\t\tduration as integer,\n\t\tmodifiedon as timestamp,\n\t\tpriority as integer,\n\t\tstatus as integer,\n\t\tduedate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['BK_activityid'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tactivitytype,\n\t\tHASHKEY = RAWHASH,\n\t\tBK_activityid,\n\t\townerid = Split@Actualizaciones@ownerid,\n\t\tregardingid = regardingobjectid,\n\t\tduration,\n\t\tmodifiedon = Split@Actualizaciones@modifiedon,\n\t\tpriority,\n\t\tstatus,\n\t\tduedate\n\t)) ~> Actualizaciones"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ParquetEmails')]",
				"[concat(variables('workspaceId'), '/datasets/STG_Emails')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RAW_to_STG_Goals')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "1_RAW_to_STG"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParquetGoals",
								"type": "DatasetReference"
							},
							"name": "DataverseParquet"
						},
						{
							"dataset": {
								"referenceName": "STG_Goals",
								"type": "DatasetReference"
							},
							"name": "STG"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "STG_Goals",
								"type": "DatasetReference"
							},
							"name": "Nuevos"
						},
						{
							"dataset": {
								"referenceName": "STG_Goals",
								"type": "DatasetReference"
							},
							"name": "Actualizaciones"
						}
					],
					"transformations": [
						{
							"name": "CrearHASH"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "Split"
						},
						{
							"name": "Insertar"
						},
						{
							"name": "Actualizar"
						}
					],
					"script": "source(output(\n\t\ttransactioncurrencyid as string,\n\t\tmodifiedon as timestamp,\n\t\ttargetinteger as integer,\n\t\tgoalenddate as timestamp,\n\t\ttargetmoney as decimal(38,18),\n\t\tgoalstartdate as timestamp,\n\t\tisamount as boolean,\n\t\tstatuscode as integer,\n\t\tgoalid as string,\n\t\tmetricid as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> DataverseParquet\nsource(output(\n\t\tSK_goalid as integer,\n\t\tHASHKEY as long,\n\t\tBK_agoalid as string,\n\t\tgoalstar as timestamp,\n\t\tgoalend as timestamp,\n\t\ttargetmoney as decimal(19,4),\n\t\ttargetinteger as integer,\n\t\tisamount as boolean,\n\t\tmodifiedon as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> STG\nDataverseParquet derive(RAWHASH = crc32(512,toString(goalstartdate),toString(goalenddate),toString(targetinteger),toInteger(toString(targetmoney),'############'))) ~> CrearHASH\nCrearHASH, STG lookup(upper(goalid) == BK_agoalid,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(HASHKEY),\n\tHASHKEY != RAWHASH,\n\tdisjoint: false) ~> Split@(Nuevos, Actualizaciones, Nada)\nSplit@Nuevos alterRow(insertIf(true())) ~> Insertar\nSplit@Actualizaciones alterRow(updateIf(true())) ~> Actualizar\nInsertar sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_goalid as integer,\n\t\tHASHKEY as long,\n\t\tBK_agoalid as string,\n\t\tgoalstar as timestamp,\n\t\tgoalend as timestamp,\n\t\ttargetmoney as decimal(19,4),\n\t\ttargetinteger as integer,\n\t\tisamount as boolean,\n\t\tmodifiedon as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tHASHKEY = RAWHASH,\n\t\tBK_agoalid = goalid,\n\t\tgoalstar = goalstartdate,\n\t\tgoalend = goalenddate,\n\t\ttargetmoney = Split@Nuevos@targetmoney,\n\t\ttargetinteger = Split@Nuevos@targetinteger,\n\t\tisamount = Split@Nuevos@isamount,\n\t\tmodifiedon = Split@Nuevos@modifiedon\n\t)) ~> Nuevos\nActualizar sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_goalid as integer,\n\t\tHASHKEY as long,\n\t\tBK_agoalid as string,\n\t\tgoalstar as timestamp,\n\t\tgoalend as timestamp,\n\t\ttargetmoney as decimal(19,4),\n\t\ttargetinteger as integer,\n\t\tisamount as boolean,\n\t\tmodifiedon as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['BK_agoalid'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tHASHKEY = RAWHASH,\n\t\tgoalstar = goalstartdate,\n\t\tgoalend = goalenddate,\n\t\ttargetmoney = Split@Actualizaciones@targetmoney,\n\t\ttargetinteger = Split@Actualizaciones@targetinteger,\n\t\tisamount = Split@Actualizaciones@isamount,\n\t\tBK_agoalid = goalid,\n\t\tmodifiedon = Split@Actualizaciones@modifiedon\n\t)) ~> Actualizaciones"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ParquetGoals')]",
				"[concat(variables('workspaceId'), '/datasets/STG_Goals')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RAW_to_STG_Leads')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "1_RAW_to_STG"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParquetLeads",
								"type": "DatasetReference"
							},
							"name": "DataverseParquet"
						},
						{
							"dataset": {
								"referenceName": "STG_Leads",
								"type": "DatasetReference"
							},
							"name": "STG"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "STG_Leads",
								"type": "DatasetReference"
							},
							"name": "Nuevos"
						},
						{
							"dataset": {
								"referenceName": "STG_Leads",
								"type": "DatasetReference"
							},
							"name": "Actualizaciones"
						}
					],
					"transformations": [
						{
							"name": "CrearHASH"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "Split"
						},
						{
							"name": "Insertar"
						},
						{
							"name": "Actualizar"
						}
					],
					"script": "source(output(\n\t\tcra83_productoid as string,\n\t\trevenue as decimal(38,18),\n\t\tleadid as string,\n\t\tcra83_territoryid as string,\n\t\tindustrycode as integer,\n\t\tnumberofemployees as integer,\n\t\tstatuscode as integer,\n\t\tleadsourcecode as integer,\n\t\townerid as string,\n\t\tmodifiedon as timestamp,\n\t\tleadqualitycode as integer,\n\t\tcreatedon as timestamp,\n\t\ttransactioncurrencyid as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> DataverseParquet\nsource(output(\n\t\tSK_leadid as integer,\n\t\tBK_leadid as string,\n\t\tcreatedon as timestamp,\n\t\townerid as string,\n\t\tleadsource as integer,\n\t\tstatuscode as integer,\n\t\tindustry as integer,\n\t\tmodifiedon as timestamp,\n\t\tcustom_territorioid as string,\n\t\tcustom_productid as string,\n\t\trating as integer,\n\t\temployees as integer,\n\t\trevenue as decimal(19,4),\n\t\tHASHKEY as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> STG\nDataverseParquet derive(RAWHASH = crc32(512,upper(toString(ownerid)),toString(leadsourcecode),toString(statuscode),toString(industrycode),toString(modifiedon),upper(toString(cra83_territoryid)),upper(toString(cra83_productoid)),toString(leadqualitycode),toString(numberofemployees),toInteger(toString(revenue),'############'))) ~> CrearHASH\nCrearHASH, STG lookup(upper(leadid) == BK_leadid,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(HASHKEY),\n\tHASHKEY != RAWHASH,\n\tdisjoint: false) ~> Split@(Nuevos, Actualizaciones, Nada)\nSplit@Nuevos alterRow(insertIf(true())) ~> Insertar\nSplit@Actualizaciones alterRow(updateIf(true())) ~> Actualizar\nInsertar sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_leadid as integer,\n\t\tBK_leadid as string,\n\t\tcreatedon as timestamp,\n\t\townerid as string,\n\t\tleadsource as integer,\n\t\tstatuscode as integer,\n\t\tindustry as integer,\n\t\tmodifiedon as timestamp,\n\t\tcustom_territorioid as string,\n\t\tcustom_productid as string,\n\t\trating as integer,\n\t\temployees as integer,\n\t\trevenue as decimal(19,4),\n\t\tHASHKEY as long\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tBK_leadid = leadid,\n\t\tcreatedon = Split@Nuevos@createdon,\n\t\townerid = Split@Nuevos@ownerid,\n\t\tleadsource = leadsourcecode,\n\t\tstatuscode = Split@Nuevos@statuscode,\n\t\tindustry = industrycode,\n\t\tmodifiedon = Split@Nuevos@modifiedon,\n\t\tcustom_territorioid = cra83_territoryid,\n\t\tcustom_productid = cra83_productoid,\n\t\trating = leadqualitycode,\n\t\temployees = numberofemployees,\n\t\trevenue = Split@Nuevos@revenue,\n\t\tHASHKEY = RAWHASH\n\t)) ~> Nuevos\nActualizar sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_leadid as integer,\n\t\tBK_leadid as string,\n\t\tcreatedon as timestamp,\n\t\townerid as string,\n\t\tleadsource as integer,\n\t\tstatuscode as integer,\n\t\tindustry as integer,\n\t\tmodifiedon as timestamp,\n\t\tcustom_territorioid as string,\n\t\tcustom_productid as string,\n\t\trating as integer,\n\t\temployees as integer,\n\t\trevenue as decimal(19,4),\n\t\tHASHKEY as long\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['BK_leadid'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tBK_leadid,\n\t\tcreatedon = Split@Actualizaciones@createdon,\n\t\townerid = Split@Actualizaciones@ownerid,\n\t\tleadsource = leadsourcecode,\n\t\tstatuscode = Split@Actualizaciones@statuscode,\n\t\tindustry = industrycode,\n\t\tmodifiedon = Split@Actualizaciones@modifiedon,\n\t\tcustom_territorioid = cra83_territoryid,\n\t\tcustom_productid = cra83_productoid,\n\t\trating = leadqualitycode,\n\t\temployees = numberofemployees,\n\t\trevenue = Split@Actualizaciones@revenue,\n\t\tHASHKEY = RAWHASH\n\t)) ~> Actualizaciones"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ParquetLeads')]",
				"[concat(variables('workspaceId'), '/datasets/STG_Leads')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RAW_to_STG_Opportunities')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "1_RAW_to_STG"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParquetOpportunity",
								"type": "DatasetReference"
							},
							"name": "DataverseParquet"
						},
						{
							"dataset": {
								"referenceName": "STG_Opportunities",
								"type": "DatasetReference"
							},
							"name": "STG"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "STG_Opportunities",
								"type": "DatasetReference"
							},
							"name": "Nuevos"
						},
						{
							"dataset": {
								"referenceName": "STG_Opportunities",
								"type": "DatasetReference"
							},
							"name": "Actualizaciones"
						}
					],
					"transformations": [
						{
							"name": "CrearHASH"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "Split"
						},
						{
							"name": "Insertar"
						},
						{
							"name": "Actualizar"
						}
					],
					"script": "source(output(\n\t\tparentaccountid as string,\n\t\toriginatingleadid as string,\n\t\tpurchasetimeframe as integer,\n\t\tstatuscode as integer,\n\t\topportunityratingcode as integer,\n\t\townerid as string,\n\t\tmodifiedon as timestamp,\n\t\tcloseprobability as integer,\n\t\tcreatedon as timestamp,\n\t\topportunityid as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> DataverseParquet\nsource(output(\n\t\tSK_opportunityid as integer,\n\t\tHASHKEY as long,\n\t\tBK_opportunityid as string,\n\t\townerid as string,\n\t\tparentaccountid as string,\n\t\torignatingleadid as string,\n\t\tcloseprobability as integer,\n\t\tmodifiedon as timestamp,\n\t\tcreatedon as timestamp,\n\t\tpurchasetimeframe as integer,\n\t\topportunityratingcode as integer,\n\t\tstatus as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> STG\nDataverseParquet derive(RAWHASH = crc32(512,upper(toString(parentaccountid)),upper(toString(originatingleadid)),toString(purchasetimeframe),toString(purchasetimeframe),toString(statuscode),toString(opportunityratingcode),upper(toString(ownerid)),toString(modifiedon))) ~> CrearHASH\nCrearHASH, STG lookup(upper(opportunityid) == BK_opportunityid,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(HASHKEY),\n\tHASHKEY != RAWHASH,\n\tdisjoint: false) ~> Split@(Nuevos, Actualizaciones, Nada)\nSplit@Nuevos alterRow(insertIf(true())) ~> Insertar\nSplit@Actualizaciones alterRow(updateIf(true())) ~> Actualizar\nInsertar sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_opportunityid as integer,\n\t\tHASHKEY as long,\n\t\tBK_opportunityid as string,\n\t\townerid as string,\n\t\tparentaccountid as string,\n\t\torignatingleadid as string,\n\t\tcloseprobability as integer,\n\t\tmodifiedon as timestamp,\n\t\tcreatedon as timestamp,\n\t\tpurchasetimeframe as integer,\n\t\topportunityratingcode as integer,\n\t\tstatus as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tHASHKEY = RAWHASH,\n\t\tBK_opportunityid = opportunityid,\n\t\townerid = Split@Nuevos@ownerid,\n\t\tparentaccountid = Split@Nuevos@parentaccountid,\n\t\torignatingleadid = originatingleadid,\n\t\tcloseprobability = Split@Nuevos@closeprobability,\n\t\tmodifiedon = Split@Nuevos@modifiedon,\n\t\tcreatedon = Split@Nuevos@createdon,\n\t\tpurchasetimeframe = Split@Nuevos@purchasetimeframe,\n\t\topportunityratingcode = Split@Nuevos@opportunityratingcode,\n\t\tstatus = statuscode\n\t)) ~> Nuevos\nActualizar sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_opportunityid as integer,\n\t\tHASHKEY as long,\n\t\tBK_opportunityid as string,\n\t\townerid as string,\n\t\tparentaccountid as string,\n\t\torignatingleadid as string,\n\t\tcloseprobability as integer,\n\t\tmodifiedon as timestamp,\n\t\tcreatedon as timestamp,\n\t\tpurchasetimeframe as integer,\n\t\topportunityratingcode as integer,\n\t\tstatus as integer\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['BK_opportunityid'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tHASHKEY = RAWHASH,\n\t\tBK_opportunityid,\n\t\townerid = Split@Actualizaciones@ownerid,\n\t\tparentaccountid = Split@Actualizaciones@parentaccountid,\n\t\torignatingleadid,\n\t\tcloseprobability = Split@Actualizaciones@closeprobability,\n\t\tmodifiedon = Split@Actualizaciones@modifiedon,\n\t\tcreatedon = Split@Actualizaciones@createdon,\n\t\tpurchasetimeframe = Split@Actualizaciones@purchasetimeframe,\n\t\topportunityratingcode = Split@Actualizaciones@opportunityratingcode,\n\t\tstatus = statuscode\n\t)) ~> Actualizaciones"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ParquetOpportunity')]",
				"[concat(variables('workspaceId'), '/datasets/STG_Opportunities')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RAW_to_STG_OpportunityProducts')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "1_RAW_to_STG"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParquetOpportunityProduct",
								"type": "DatasetReference"
							},
							"name": "DataverseParquet"
						},
						{
							"dataset": {
								"referenceName": "STG_OpportunityProducts",
								"type": "DatasetReference"
							},
							"name": "STG"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "STG_OpportunityProducts",
								"type": "DatasetReference"
							},
							"name": "Nuevos"
						},
						{
							"dataset": {
								"referenceName": "STG_OpportunityProducts",
								"type": "DatasetReference"
							},
							"name": "Actualizaciones"
						}
					],
					"transformations": [
						{
							"name": "CrearHASH"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "Split"
						},
						{
							"name": "Insertar"
						},
						{
							"name": "Actualizar"
						}
					],
					"script": "source(output(\n\t\tproductid as string,\n\t\ttransactioncurrencyid as string,\n\t\textendedamount as decimal(38,18),\n\t\tpriceperunit as decimal(38,18),\n\t\tmodifiedon as timestamp,\n\t\tquantity as decimal(38,18),\n\t\topportunityproductid as string,\n\t\topportunityid as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> DataverseParquet\nsource(output(\n\t\tSK_OpportunityProductid as integer,\n\t\tHASHKEY as long,\n\t\tBK_OpportunityProductid as string,\n\t\tproductid as string,\n\t\topportunityid as string,\n\t\tamount as decimal(19,4),\n\t\tpriceunit as decimal(19,4),\n\t\tquantity as integer,\n\t\tmodifiedon as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> STG\nDataverseParquet derive(RAWHASH = crc32(512,toInteger(toString(extendedamount),'############'),toInteger(toString(priceperunit),'############'),toInteger(toString(quantity),'####'))) ~> CrearHASH\nCrearHASH, STG lookup(upper(opportunityproductid) == BK_OpportunityProductid,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(HASHKEY),\n\tHASHKEY != RAWHASH,\n\tdisjoint: false) ~> Split@(Nuevos, Actualizaciones, Nada)\nSplit@Nuevos alterRow(insertIf(true())) ~> Insertar\nSplit@Actualizaciones alterRow(updateIf(true())) ~> Actualizar\nInsertar sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_OpportunityProductid as integer,\n\t\tHASHKEY as long,\n\t\tBK_OpportunityProductid as string,\n\t\tproductid as string,\n\t\topportunityid as string,\n\t\tamount as decimal(19,4),\n\t\tpriceunit as decimal(19,4),\n\t\tquantity as integer,\n\t\tmodifiedon as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tHASHKEY = RAWHASH,\n\t\tBK_OpportunityProductid = opportunityproductid,\n\t\tproductid = Split@Nuevos@productid,\n\t\topportunityid = Split@Nuevos@opportunityid,\n\t\tamount = extendedamount,\n\t\tpriceunit = priceperunit,\n\t\tquantity = Split@Nuevos@quantity,\n\t\tmodifiedon = Split@Nuevos@modifiedon\n\t)) ~> Nuevos\nActualizar sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_OpportunityProductid as integer,\n\t\tHASHKEY as long,\n\t\tBK_OpportunityProductid as string,\n\t\tproductid as string,\n\t\topportunityid as string,\n\t\tamount as decimal(19,4),\n\t\tpriceunit as decimal(19,4),\n\t\tquantity as integer,\n\t\tmodifiedon as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['BK_OpportunityProductid'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tHASHKEY = RAWHASH,\n\t\tBK_OpportunityProductid = opportunityproductid,\n\t\tproductid = Split@Actualizaciones@productid,\n\t\topportunityid = Split@Actualizaciones@opportunityid,\n\t\tamount = extendedamount,\n\t\tpriceunit = priceperunit,\n\t\tquantity = Split@Actualizaciones@quantity,\n\t\tmodifiedon = Split@Actualizaciones@modifiedon\n\t)) ~> Actualizaciones"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ParquetOpportunityProduct')]",
				"[concat(variables('workspaceId'), '/datasets/STG_OpportunityProducts')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RAW_to_STG_PhoneCalls')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "1_RAW_to_STG/Acitivities"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParquetPhoneCall",
								"type": "DatasetReference"
							},
							"name": "DataverseParquet"
						},
						{
							"dataset": {
								"referenceName": "STG_PhoneCalls",
								"type": "DatasetReference"
							},
							"name": "STG"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "STG_PhoneCalls",
								"type": "DatasetReference"
							},
							"name": "Nuevos"
						},
						{
							"dataset": {
								"referenceName": "STG_PhoneCalls",
								"type": "DatasetReference"
							},
							"name": "Actualizaciones"
						}
					],
					"transformations": [
						{
							"name": "CrearHASH"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "Split"
						},
						{
							"name": "Insertar"
						},
						{
							"name": "Actualizar"
						}
					],
					"script": "source(output(\n\t\tactivityid as string,\n\t\tdirectioncode as boolean,\n\t\tstatuscode as integer,\n\t\tsubject as string,\n\t\tscheduledend as timestamp,\n\t\tregardingobjectid as string,\n\t\tactualdurationminutes as integer,\n\t\townerid as string,\n\t\tprioritycode as integer,\n\t\tmodifiedon as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> DataverseParquet\nsource(output(\n\t\tactivitytype as integer,\n\t\tHASHKEY as long,\n\t\tBK_activityid as string,\n\t\townerid as string,\n\t\tregardingid as string,\n\t\tduration as integer,\n\t\tdirection as boolean,\n\t\tmodifiedon as timestamp,\n\t\tpriority as integer,\n\t\tstatus as integer,\n\t\tduedate as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> STG\nDataverseParquet derive(RAWHASH = crc32(512,toString(ownerid),toString(statuscode),toString(scheduledend),toString(prioritycode))) ~> CrearHASH\nCrearHASH, STG lookup(upper(activityid) == BK_activityid,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(HASHKEY),\n\tHASHKEY != RAWHASH,\n\tdisjoint: false) ~> Split@(Nuevos, Actualizaciones, Nada)\nSplit@Nuevos alterRow(insertIf(true())) ~> Insertar\nSplit@Actualizaciones alterRow(updateIf(true())) ~> Actualizar\nInsertar sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tactivitytype as integer,\n\t\tHASHKEY as long,\n\t\tBK_activityid as string,\n\t\townerid as string,\n\t\tregardingid as string,\n\t\tduration as integer,\n\t\tdirection as boolean,\n\t\tmodifiedon as timestamp,\n\t\tpriority as integer,\n\t\tstatus as integer,\n\t\tduedate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tactivitytype,\n\t\tHASHKEY = RAWHASH,\n\t\tBK_activityid = activityid,\n\t\townerid = Split@Nuevos@ownerid,\n\t\tregardingid = regardingobjectid,\n\t\tduration,\n\t\tdirection,\n\t\tmodifiedon = Split@Nuevos@modifiedon,\n\t\tpriority,\n\t\tstatus,\n\t\tduedate\n\t)) ~> Nuevos\nActualizar sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tactivitytype as integer,\n\t\tHASHKEY as long,\n\t\tBK_activityid as string,\n\t\townerid as string,\n\t\tregardingid as string,\n\t\tduration as integer,\n\t\tdirection as boolean,\n\t\tmodifiedon as timestamp,\n\t\tpriority as integer,\n\t\tstatus as integer,\n\t\tduedate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['BK_activityid'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tactivitytype,\n\t\tHASHKEY = RAWHASH,\n\t\tBK_activityid,\n\t\townerid = Split@Actualizaciones@ownerid,\n\t\tregardingid = regardingobjectid,\n\t\tduration,\n\t\tdirection,\n\t\tmodifiedon = Split@Actualizaciones@modifiedon,\n\t\tpriority,\n\t\tstatus,\n\t\tduedate\n\t)) ~> Actualizaciones"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ParquetPhoneCall')]",
				"[concat(variables('workspaceId'), '/datasets/STG_PhoneCalls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RAW_to_STG_Products')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "1_RAW_to_STG"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParquetProduct",
								"type": "DatasetReference"
							},
							"name": "DataverseParquet"
						},
						{
							"dataset": {
								"referenceName": "STG_Products",
								"type": "DatasetReference"
							},
							"name": "STG"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "STG_Products",
								"type": "DatasetReference"
							},
							"name": "Nuevos"
						},
						{
							"dataset": {
								"referenceName": "STG_Products",
								"type": "DatasetReference"
							},
							"name": "Actualizaciones"
						}
					],
					"transformations": [
						{
							"name": "CrearHASH"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "Split"
						},
						{
							"name": "Insertar"
						},
						{
							"name": "Actualizar"
						}
					],
					"script": "source(output(\n\t\tproductnumber as string,\n\t\tproductid as string,\n\t\ttransactioncurrencyid as string,\n\t\tmodifiedon as timestamp,\n\t\tstandardcost as decimal(38,18),\n\t\tparentproductid as string,\n\t\tname as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> DataverseParquet\nsource(output(\n\t\tSK_productid as integer,\n\t\tHASHKEY as long,\n\t\tBK_productid as string,\n\t\tproductnumber as string,\n\t\tproductname as string,\n\t\tBK_family as string,\n\t\tstandarcost as decimal(19,4),\n\t\tmodifiedon as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> STG\nDataverseParquet derive(RAWHASH = crc32(512,toString(name),toString(productnumber),toInteger(toString(standardcost),'############'),upper(toString(parentproductid)))) ~> CrearHASH\nCrearHASH, STG lookup(upper(productid) == BK_productid,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(HASHKEY),\n\tHASHKEY != RAWHASH,\n\tdisjoint: false) ~> Split@(Nuevos, Actualizaciones, Nada)\nSplit@Nuevos alterRow(insertIf(true())) ~> Insertar\nSplit@Actualizaciones alterRow(updateIf(true())) ~> Actualizar\nInsertar sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_productid as integer,\n\t\tHASHKEY as long,\n\t\tBK_productid as string,\n\t\tproductnumber as string,\n\t\tproductname as string,\n\t\tBK_family as string,\n\t\tstandarcost as decimal(19,4),\n\t\tmodifiedon as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tHASHKEY = RAWHASH,\n\t\tBK_productid = productid,\n\t\tproductnumber = Split@Nuevos@productnumber,\n\t\tproductname = name,\n\t\tBK_family = parentproductid,\n\t\tstandarcost = standardcost,\n\t\tmodifiedon = Split@Nuevos@modifiedon\n\t)) ~> Nuevos\nActualizar sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_productid as integer,\n\t\tHASHKEY as long,\n\t\tBK_productid as string,\n\t\tproductnumber as string,\n\t\tproductname as string,\n\t\tBK_family as string,\n\t\tstandarcost as decimal(19,4),\n\t\tmodifiedon as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['BK_productid'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tHASHKEY = RAWHASH,\n\t\tBK_productid = productid,\n\t\tproductnumber = Split@Actualizaciones@productnumber,\n\t\tproductname = name,\n\t\tBK_family = parentproductid,\n\t\tstandarcost = standardcost,\n\t\tmodifiedon = Split@Actualizaciones@modifiedon\n\t)) ~> Actualizaciones"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ParquetProduct')]",
				"[concat(variables('workspaceId'), '/datasets/STG_Products')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RAW_to_STG_ProductsFamily')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "1_RAW_to_STG"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParquetProductFamily",
								"type": "DatasetReference"
							},
							"name": "DataverseParquet"
						},
						{
							"dataset": {
								"referenceName": "STG_ProductFamilies",
								"type": "DatasetReference"
							},
							"name": "STG"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "STG_ProductFamilies",
								"type": "DatasetReference"
							},
							"name": "Nuevos"
						},
						{
							"dataset": {
								"referenceName": "STG_ProductFamilies",
								"type": "DatasetReference"
							},
							"name": "Actualizaciones"
						}
					],
					"transformations": [
						{
							"name": "CrearHASH"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "Split"
						},
						{
							"name": "Insertar"
						},
						{
							"name": "Actualizar"
						}
					],
					"script": "source(output(\n\t\tname as string,\n\t\tproductid as string,\n\t\tproductnumber as string,\n\t\tproductstructure as integer,\n\t\tmodifiedon as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> DataverseParquet\nsource(output(\n\t\tSK_productfamilyid as integer,\n\t\tHASHKEY as long,\n\t\tBK_productfamilyid as string,\n\t\tproductnumber as string,\n\t\tproductname as string,\n\t\tmodifiedon as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> STG\nDataverseParquet derive(RAWHASH = crc32(512,toString(name),toString(productnumber))) ~> CrearHASH\nCrearHASH, STG lookup(upper(productid) == BK_productfamilyid,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(HASHKEY),\n\tHASHKEY != RAWHASH,\n\tdisjoint: false) ~> Split@(Nuevos, Actualizaciones, Nada)\nSplit@Nuevos alterRow(insertIf(true())) ~> Insertar\nSplit@Actualizaciones alterRow(updateIf(true())) ~> Actualizar\nInsertar sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_productfamilyid as integer,\n\t\tHASHKEY as long,\n\t\tBK_productfamilyid as string,\n\t\tproductnumber as string,\n\t\tproductname as string,\n\t\tmodifiedon as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tHASHKEY = RAWHASH,\n\t\tBK_productfamilyid = productid,\n\t\tproductnumber = Split@Nuevos@productnumber,\n\t\tproductname = name,\n\t\tmodifiedon = Split@Nuevos@modifiedon\n\t)) ~> Nuevos\nActualizar sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_productfamilyid as integer,\n\t\tHASHKEY as long,\n\t\tBK_productfamilyid as string,\n\t\tproductnumber as string,\n\t\tproductname as string,\n\t\tmodifiedon as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['BK_productfamilyid'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tHASHKEY = RAWHASH,\n\t\tBK_productfamilyid = productid,\n\t\tproductnumber = Split@Actualizaciones@productnumber,\n\t\tproductname = name,\n\t\tmodifiedon = Split@Actualizaciones@modifiedon\n\t)) ~> Actualizaciones"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ParquetProductFamily')]",
				"[concat(variables('workspaceId'), '/datasets/STG_ProductFamilies')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RAW_to_STG_SystemManagers')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "1_RAW_to_STG"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParquetSystemManagers",
								"type": "DatasetReference"
							},
							"name": "DataverseParquet"
						},
						{
							"dataset": {
								"referenceName": "STG_SystemUsersManagers",
								"type": "DatasetReference"
							},
							"name": "STG"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "STG_SystemUsersManagers",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "STG_SystemUsersManagers",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "CrearHASH"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "Split"
						},
						{
							"name": "Insertar"
						},
						{
							"name": "Actualizar"
						}
					],
					"script": "source(output(\n\t\tfullname as string,\n\t\tsystemuserid as string,\n\t\tmodifiedon as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> DataverseParquet\nsource(output(\n\t\tSK_systemusermanagerid as integer,\n\t\tHASHKEY as long,\n\t\tBK_systemusermanagerid as string,\n\t\tfullname as string,\n\t\tmodifiedon as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> STG\nDataverseParquet derive(RAWHASH = crc32(512,toString(fullname))) ~> CrearHASH\nCrearHASH, STG lookup(upper(systemuserid) == BK_systemusermanagerid,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(HASHKEY),\n\tHASHKEY != RAWHASH,\n\tdisjoint: false) ~> Split@(Nuevos, Actualizaciones, Nada)\nSplit@Nuevos alterRow(insertIf(true())) ~> Insertar\nSplit@Actualizaciones alterRow(updateIf(true())) ~> Actualizar\nInsertar sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_systemusermanagerid as integer,\n\t\tHASHKEY as long,\n\t\tBK_systemusermanagerid as string,\n\t\tfullname as string,\n\t\tmodifiedon as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tHASHKEY = RAWHASH,\n\t\tBK_systemusermanagerid = systemuserid,\n\t\tfullname = Split@Nuevos@fullname,\n\t\tmodifiedon = Split@Nuevos@modifiedon\n\t)) ~> sink1\nActualizar sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_systemusermanagerid as integer,\n\t\tHASHKEY as long,\n\t\tBK_systemusermanagerid as string,\n\t\tfullname as string,\n\t\tmodifiedon as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['BK_systemusermanagerid'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tHASHKEY = RAWHASH,\n\t\tBK_systemusermanagerid,\n\t\tfullname = Split@Actualizaciones@fullname,\n\t\tmodifiedon = Split@Actualizaciones@modifiedon\n\t)) ~> sink2"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ParquetSystemManagers')]",
				"[concat(variables('workspaceId'), '/datasets/STG_SystemUsersManagers')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RAW_to_STG_SystemUsers')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "1_RAW_to_STG"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParquetSystemUsers",
								"type": "DatasetReference"
							},
							"name": "DataverseParquet"
						},
						{
							"dataset": {
								"referenceName": "STG_SystemUsers",
								"type": "DatasetReference"
							},
							"name": "STG"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "STG_SystemUsers",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "STG_SystemUsers",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "CrearHASH"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "Split"
						},
						{
							"name": "Insertar"
						},
						{
							"name": "Actualizar"
						}
					],
					"script": "source(output(\n\t\tfullname as string,\n\t\tsystemuserid as string,\n\t\tparentsystemuserid as string,\n\t\tmodifiedon as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> DataverseParquet\nsource(output(\n\t\tSK_systemuserid as integer,\n\t\tHASHKEY as long,\n\t\tBK_systemuserid as string,\n\t\tfullname as string,\n\t\tparentsystemuserid as string,\n\t\tmodifiedon as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> STG\nDataverseParquet derive(RAWHASH = crc32(512,upper(toString(fullname)),upper(toString(parentsystemuserid)))) ~> CrearHASH\nCrearHASH, STG lookup(upper(systemuserid) == BK_systemuserid,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(HASHKEY),\n\tHASHKEY != RAWHASH,\n\tdisjoint: false) ~> Split@(Nuevos, Actualizaciones, Nada)\nSplit@Nuevos alterRow(insertIf(true())) ~> Insertar\nSplit@Actualizaciones alterRow(updateIf(true())) ~> Actualizar\nInsertar sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_systemuserid as integer,\n\t\tHASHKEY as long,\n\t\tBK_systemuserid as string,\n\t\tfullname as string,\n\t\tparentsystemuserid as string,\n\t\tmodifiedon as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tHASHKEY = RAWHASH,\n\t\tBK_systemuserid = systemuserid,\n\t\tfullname = Split@Nuevos@fullname,\n\t\tparentsystemuserid = Split@Nuevos@parentsystemuserid,\n\t\tmodifiedon = Split@Nuevos@modifiedon\n\t)) ~> sink1\nActualizar sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_systemuserid as integer,\n\t\tHASHKEY as long,\n\t\tBK_systemuserid as string,\n\t\tfullname as string,\n\t\tparentsystemuserid as string,\n\t\tmodifiedon as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['BK_systemuserid'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tHASHKEY = RAWHASH,\n\t\tBK_systemuserid,\n\t\tfullname = Split@Actualizaciones@fullname,\n\t\tparentsystemuserid = Split@Actualizaciones@parentsystemuserid,\n\t\tmodifiedon = Split@Actualizaciones@modifiedon\n\t)) ~> sink2"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ParquetSystemUsers')]",
				"[concat(variables('workspaceId'), '/datasets/STG_SystemUsers')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RAW_to_STG_Task')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "1_RAW_to_STG/Acitivities"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParquetTask",
								"type": "DatasetReference"
							},
							"name": "DataverseParquet"
						},
						{
							"dataset": {
								"referenceName": "STG_Tasks",
								"type": "DatasetReference"
							},
							"name": "STG"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "STG_Tasks",
								"type": "DatasetReference"
							},
							"name": "Nuevos"
						},
						{
							"dataset": {
								"referenceName": "STG_Tasks",
								"type": "DatasetReference"
							},
							"name": "Actualizaciones"
						}
					],
					"transformations": [
						{
							"name": "CrearHASH"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "Split"
						},
						{
							"name": "Insertar"
						},
						{
							"name": "Actualizar"
						}
					],
					"script": "source(output(\n\t\tactivityid as string,\n\t\tstatuscode as integer,\n\t\tsubject as string,\n\t\tscheduledend as timestamp,\n\t\tregardingobjectid as string,\n\t\tactualdurationminutes as integer,\n\t\townerid as string,\n\t\tprioritycode as integer,\n\t\tmodifiedon as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> DataverseParquet\nsource(output(\n\t\tactivitytype as integer,\n\t\tHASHKEY as long,\n\t\tBK_activityid as string,\n\t\townerid as string,\n\t\tregardingid as string,\n\t\tduration as integer,\n\t\tmodifiedon as timestamp,\n\t\tpriority as integer,\n\t\tstatus as integer,\n\t\tduedate as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> STG\nDataverseParquet derive(RAWHASH = crc32(512,toString(ownerid),toString(statuscode),toString(scheduledend),toString(prioritycode),toString(actualdurationminutes))) ~> CrearHASH\nCrearHASH, STG lookup(upper(activityid) == BK_activityid,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(HASHKEY),\n\tHASHKEY != RAWHASH,\n\tdisjoint: false) ~> Split@(Nuevos, Actualizaciones, Nada)\nSplit@Nuevos alterRow(insertIf(true())) ~> Insertar\nSplit@Actualizaciones alterRow(updateIf(true())) ~> Actualizar\nInsertar sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tactivitytype as integer,\n\t\tHASHKEY as long,\n\t\tBK_activityid as string,\n\t\townerid as string,\n\t\tregardingid as string,\n\t\tduration as integer,\n\t\tdirection as boolean,\n\t\tmodifiedon as timestamp,\n\t\tpriority as integer,\n\t\tstatus as integer,\n\t\tduedate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tactivitytype,\n\t\tHASHKEY = RAWHASH,\n\t\tBK_activityid = activityid,\n\t\townerid = Split@Nuevos@ownerid,\n\t\tregardingid = regardingobjectid,\n\t\tduration,\n\t\tmodifiedon = Split@Nuevos@modifiedon,\n\t\tpriority,\n\t\tstatus,\n\t\tduedate\n\t)) ~> Nuevos\nActualizar sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tactivitytype as integer,\n\t\tHASHKEY as long,\n\t\tBK_activityid as string,\n\t\townerid as string,\n\t\tregardingid as string,\n\t\tduration as integer,\n\t\tdirection as boolean,\n\t\tmodifiedon as timestamp,\n\t\tpriority as integer,\n\t\tstatus as integer,\n\t\tduedate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['BK_activityid'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tactivitytype,\n\t\tHASHKEY = RAWHASH,\n\t\tBK_activityid,\n\t\townerid = Split@Actualizaciones@ownerid,\n\t\tregardingid = regardingobjectid,\n\t\tduration,\n\t\tmodifiedon = Split@Actualizaciones@modifiedon,\n\t\tpriority,\n\t\tstatus,\n\t\tduedate\n\t)) ~> Actualizaciones"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ParquetTask')]",
				"[concat(variables('workspaceId'), '/datasets/STG_Tasks')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RAW_to_STG_Territories')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "1_RAW_to_STG"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParquetTerritories",
								"type": "DatasetReference"
							},
							"name": "DataverseParquet"
						},
						{
							"dataset": {
								"referenceName": "STG_Territories",
								"type": "DatasetReference"
							},
							"name": "STG"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "STG_Territories",
								"type": "DatasetReference"
							},
							"name": "Nuevos"
						},
						{
							"dataset": {
								"referenceName": "STG_Territories",
								"type": "DatasetReference"
							},
							"name": "Actualizaciones"
						}
					],
					"transformations": [
						{
							"name": "CrearHASH"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "Split"
						},
						{
							"name": "Insertar"
						},
						{
							"name": "Actualizar"
						}
					],
					"script": "source(output(\n\t\tname as string,\n\t\tterritoryid as string,\n\t\tmodifiedon as timestamp,\n\t\tparentterritoryid as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> DataverseParquet\nsource(output(\n\t\tSK_territoryid as integer,\n\t\tHASHKEY as long,\n\t\tBK_territoryid as string,\n\t\tterritoryname as string,\n\t\tparentterritory as string,\n\t\tmodifiedon as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> STG\nDataverseParquet derive(RAWHASH = crc32(512,toString(name),upper(toString(parentterritoryid)))) ~> CrearHASH\nCrearHASH, STG lookup(upper(territoryid) == BK_territoryid,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(HASHKEY),\n\tHASHKEY != RAWHASH,\n\tdisjoint: false) ~> Split@(Nuevos, Actualizaciones, Nada)\nSplit@Nuevos alterRow(insertIf(true())) ~> Insertar\nSplit@Actualizaciones alterRow(updateIf(true())) ~> Actualizar\nInsertar sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_territoryid as integer,\n\t\tHASHKEY as long,\n\t\tBK_territoryid as string,\n\t\tterritoryname as string,\n\t\tparentterritory as string,\n\t\tmodifiedon as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tHASHKEY = RAWHASH,\n\t\tBK_territoryid = territoryid,\n\t\tterritoryname = name,\n\t\tparentterritory = parentterritoryid,\n\t\tmodifiedon = Split@Nuevos@modifiedon\n\t)) ~> Nuevos\nActualizar sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_territoryid as integer,\n\t\tHASHKEY as long,\n\t\tBK_territoryid as string,\n\t\tterritoryname as string,\n\t\tparentterritory as string,\n\t\tmodifiedon as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['BK_territoryid'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tHASHKEY = RAWHASH,\n\t\tBK_territoryid,\n\t\tterritoryname = name,\n\t\tparentterritory = parentterritoryid,\n\t\tmodifiedon = Split@Actualizaciones@modifiedon\n\t)) ~> Actualizaciones"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ParquetTerritories')]",
				"[concat(variables('workspaceId'), '/datasets/STG_Territories')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RecLog')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Logs",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Logs",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "parameters{\n\tFase as string,\n\tPipeline as string,\n\tStarProcess as string,\n\tEndProcess as string,\n\tEstatus as string,\n\tMensaje as string\n}\nsource(output(\n\t\tId as integer,\n\t\tFase as string,\n\t\tPipeline as string,\n\t\tStartProcess as timestamp,\n\t\tEndProcess as timestamp,\n\t\tEstatus as string,\n\t\tMensaje as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 1,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT TOP 1 * FROM dbo.logs ORDER BY Id DESC',\n\tformat: 'query') ~> source1\nsource1 derive(Fase2 = $Fase,\n\t\tPipeline2 = $Pipeline,\n\t\tEstatus2 = $Estatus,\n\t\tMensaje2 = $Mensaje,\n\t\tStartProcess2 = toTimestamp($StarProcess),\n\t\tEndProcess2 = toTimestamp($EndProcess)) ~> DerivedColumn1\nDerivedColumn1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tId as integer,\n\t\tFase as string,\n\t\tPipeline as string,\n\t\tStartProcess as timestamp,\n\t\tEndProcess as timestamp,\n\t\tEstatus as string,\n\t\tMensaje as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tFase = Fase2,\n\t\tPipeline = Pipeline2,\n\t\tStartProcess = StartProcess2,\n\t\tEndProcess = EndProcess2,\n\t\tEstatus = Estatus2,\n\t\tMensaje = Mensaje2\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Logs')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STG_to_DWH_Accounts')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "2_STG_to_DWH"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_Accounts",
								"type": "DatasetReference"
							},
							"name": "STG"
						},
						{
							"dataset": {
								"referenceName": "DWH_Accounts",
								"type": "DatasetReference"
							},
							"name": "DWH"
						},
						{
							"dataset": {
								"referenceName": "STG_SystemUsers",
								"type": "DatasetReference"
							},
							"name": "SystemUsers"
						},
						{
							"dataset": {
								"referenceName": "STG_Leads",
								"type": "DatasetReference"
							},
							"name": "Lead"
						},
						{
							"dataset": {
								"referenceName": "STG_Territories",
								"type": "DatasetReference"
							},
							"name": "Territory"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DWH_Accounts",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "DWH_Accounts",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "STGHASH"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						},
						{
							"name": "JoinSystemUsers"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "JoinLead"
						},
						{
							"name": "JoinTerritory"
						},
						{
							"name": "JoinSystemUser"
						},
						{
							"name": "JoinLeads"
						},
						{
							"name": "JoinTerritories"
						},
						{
							"name": "DerivedColumn2"
						}
					],
					"script": "source(output(\n\t\tSK_accountid as integer,\n\t\tHASHKEY as long,\n\t\tBK_accountid as string,\n\t\tname as string,\n\t\townerid as string,\n\t\torignatingleadid as string,\n\t\trenevue as decimal(19,4),\n\t\tnumberofemployees as integer,\n\t\tterritoryid as string,\n\t\tindustrycode as integer,\n\t\tmodifiedon as timestamp,\n\t\tcreatedon as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> STG\nsource(output(\n\t\tSK_accountid as integer,\n\t\tHASHKEY as long,\n\t\tname as string,\n\t\townerid as integer,\n\t\torignatingleadid as integer,\n\t\trenevue as decimal(19,4),\n\t\tnumberofemployees as integer,\n\t\tterritoryid as integer,\n\t\tindustrycode as integer,\n\t\tmodifiedon as timestamp,\n\t\tcreatedon as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DWH\nsource(output(\n\t\tSK_systemuserid as integer,\n\t\tHASHKEY as long,\n\t\tBK_systemuserid as string,\n\t\tfullname as string,\n\t\tparentsystemuserid as string,\n\t\tmodifiedon as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SystemUsers\nsource(output(\n\t\tSK_leadid as integer,\n\t\tBK_leadid as string,\n\t\tcreatedon as timestamp,\n\t\townerid as string,\n\t\tleadsource as integer,\n\t\tstatuscode as integer,\n\t\tindustry as integer,\n\t\tmodifiedon as timestamp,\n\t\tcustom_territorioid as string,\n\t\tcustom_productid as string,\n\t\trating as integer,\n\t\temployees as integer,\n\t\trevenue as decimal(19,4),\n\t\tHASHKEY as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Lead\nsource(output(\n\t\tSK_territoryid as integer,\n\t\tHASHKEY as long,\n\t\tBK_territoryid as string,\n\t\tterritoryname as string,\n\t\tparentterritory as string,\n\t\tmodifiedon as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Territory\nSTG derive(STGHASH = crc32(512,upper(toString(ownerid)),toString(name),toInteger(toString(renevue),'############'),toString(numberofemployees),toString(industrycode),upper(toString(orignatingleadid)),upper(toString(territoryid)))) ~> STGHASH\nSTGHASH, DWH lookup(STG@SK_accountid == DWH@SK_accountid,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(DWH@HASHKEY),\n\tSTGHASH!=DWH@HASHKEY,\n\tdisjoint: false) ~> ConditionalSplit1@(Nuevos, Actualizaciones, Nada)\nConditionalSplit1@Nuevos alterRow(insertIf(true())) ~> AlterRow1\nConditionalSplit1@Actualizaciones alterRow(updateIf(true())) ~> AlterRow2\nAlterRow1, SystemUsers join(ConditionalSplit1@Nuevos@ownerid == BK_systemuserid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSystemUsers\nJoinTerritory derive(STGOwner = SK_systemuserid,\n\t\tSTGLead = SK_leadid,\n\t\tSTGTerritory = SK_territoryid) ~> DerivedColumn1\nJoinSystemUsers, Lead join(ConditionalSplit1@Nuevos@orignatingleadid == BK_leadid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinLead\nJoinLead, Territory join(ConditionalSplit1@Nuevos@territoryid == BK_territoryid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinTerritory\nAlterRow2, SystemUsers join(ConditionalSplit1@Actualizaciones@ownerid == BK_systemuserid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSystemUser\nJoinSystemUser, Lead join(ConditionalSplit1@Actualizaciones@orignatingleadid == BK_leadid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinLeads\nJoinLeads, Territory join(ConditionalSplit1@Actualizaciones@territoryid == BK_territoryid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinTerritories\nJoinTerritories derive(STGOwner = SK_systemuserid,\n\t\tSTGLead = SK_leadid,\n\t\tSTGTerritory = SK_territoryid) ~> DerivedColumn2\nDerivedColumn1 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_accountid as integer,\n\t\tHASHKEY as long,\n\t\tname as string,\n\t\townerid as integer,\n\t\torignatingleadid as integer,\n\t\trenevue as decimal(19,4),\n\t\tnumberofemployees as integer,\n\t\tterritoryid as integer,\n\t\tindustrycode as integer,\n\t\tmodifiedon as timestamp,\n\t\tcreatedon as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tHASHKEY = STGHASH,\n\t\tname = ConditionalSplit1@Nuevos@name,\n\t\townerid = STGOwner,\n\t\torignatingleadid = STGLead,\n\t\trenevue = ConditionalSplit1@Nuevos@renevue,\n\t\tnumberofemployees = ConditionalSplit1@Nuevos@numberofemployees,\n\t\tterritoryid = STGTerritory,\n\t\tindustrycode = ConditionalSplit1@Nuevos@industrycode,\n\t\tmodifiedon = ConditionalSplit1@Nuevos@modifiedon,\n\t\tcreatedon = ConditionalSplit1@Nuevos@createdon,\n\t\tSK_accountid = ConditionalSplit1@Nuevos@SK_accountid\n\t)) ~> sink1\nDerivedColumn2 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_accountid as integer,\n\t\tHASHKEY as long,\n\t\tname as string,\n\t\townerid as integer,\n\t\torignatingleadid as integer,\n\t\trenevue as decimal(19,4),\n\t\tnumberofemployees as integer,\n\t\tterritoryid as integer,\n\t\tindustrycode as integer,\n\t\tmodifiedon as timestamp,\n\t\tcreatedon as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['SK_accountid'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tSK_accountid = ConditionalSplit1@Actualizaciones@SK_accountid,\n\t\tHASHKEY = STGHASH,\n\t\tname = ConditionalSplit1@Actualizaciones@name,\n\t\townerid = STGOwner,\n\t\torignatingleadid = STGLead,\n\t\trenevue = ConditionalSplit1@Actualizaciones@renevue,\n\t\tnumberofemployees = ConditionalSplit1@Actualizaciones@numberofemployees,\n\t\tterritoryid = STGTerritory,\n\t\tindustrycode = ConditionalSplit1@Actualizaciones@industrycode,\n\t\tmodifiedon = ConditionalSplit1@Actualizaciones@modifiedon,\n\t\tcreatedon = ConditionalSplit1@Actualizaciones@createdon\n\t)) ~> sink2"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/STG_Accounts')]",
				"[concat(variables('workspaceId'), '/datasets/DWH_Accounts')]",
				"[concat(variables('workspaceId'), '/datasets/STG_SystemUsers')]",
				"[concat(variables('workspaceId'), '/datasets/STG_Leads')]",
				"[concat(variables('workspaceId'), '/datasets/STG_Territories')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STG_to_DWH_Goals')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "2_STG_to_DWH"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_Goals",
								"type": "DatasetReference"
							},
							"name": "STG"
						},
						{
							"dataset": {
								"referenceName": "DWH_Goals",
								"type": "DatasetReference"
							},
							"name": "DWH"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DWH_Goals",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "DWH_Goals",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "STGHASH"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						}
					],
					"script": "source(output(\n\t\tSK_goalid as integer,\n\t\tHASHKEY as long,\n\t\tBK_agoalid as string,\n\t\tgoalstar as timestamp,\n\t\tgoalend as timestamp,\n\t\ttargetmoney as decimal(19,4),\n\t\ttargetinteger as integer,\n\t\tisamount as boolean,\n\t\tmodifiedon as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> STG\nsource(output(\n\t\tSK_goalid as integer,\n\t\tHASHKEY as long,\n\t\tgoalstar as timestamp,\n\t\tgoalend as timestamp,\n\t\ttargetmoney as decimal(19,4),\n\t\ttargetinteger as integer,\n\t\tisamount as boolean\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DWH\nSTG derive(STGHASH = crc32(512,toString(goalstar),toString(goalend),toString(targetinteger),toInteger(toString(targetmoney),'############'))) ~> STGHASH\nSTGHASH, DWH lookup(STG@SK_goalid == DWH@SK_goalid,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(DWH@HASHKEY),\n\tSTGHASH!=DWH@HASHKEY,\n\tdisjoint: false) ~> ConditionalSplit1@(Nuevos, Actualizaciones, Nada)\nConditionalSplit1@Nuevos alterRow(insertIf(true())) ~> AlterRow1\nConditionalSplit1@Actualizaciones alterRow(updateIf(true())) ~> AlterRow2\nAlterRow1 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_goalid as integer,\n\t\tHASHKEY as long,\n\t\tgoalstar as timestamp,\n\t\tgoalend as timestamp,\n\t\ttargetmoney as decimal(19,4),\n\t\ttargetinteger as integer,\n\t\tisamount as boolean\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tHASHKEY = STGHASH,\n\t\tgoalstar = ConditionalSplit1@Nuevos@goalstar,\n\t\tgoalend = ConditionalSplit1@Nuevos@goalend,\n\t\ttargetmoney = ConditionalSplit1@Nuevos@targetmoney,\n\t\ttargetinteger = ConditionalSplit1@Nuevos@targetinteger,\n\t\tisamount = ConditionalSplit1@Nuevos@isamount,\n\t\tSK_goalid = ConditionalSplit1@Nuevos@SK_goalid\n\t)) ~> sink1\nAlterRow2 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_goalid as integer,\n\t\tHASHKEY as long,\n\t\tgoalstar as timestamp,\n\t\tgoalend as timestamp,\n\t\ttargetmoney as decimal(19,4),\n\t\ttargetinteger as integer,\n\t\tisamount as boolean\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['SK_goalid'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tSK_goalid = ConditionalSplit1@Actualizaciones@SK_goalid,\n\t\tHASHKEY = STGHASH,\n\t\tgoalstar = ConditionalSplit1@Actualizaciones@goalstar,\n\t\tgoalend = ConditionalSplit1@Actualizaciones@goalend,\n\t\ttargetmoney = ConditionalSplit1@Actualizaciones@targetmoney,\n\t\ttargetinteger = ConditionalSplit1@Actualizaciones@targetinteger,\n\t\tisamount = ConditionalSplit1@Actualizaciones@isamount\n\t)) ~> sink2"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/STG_Goals')]",
				"[concat(variables('workspaceId'), '/datasets/DWH_Goals')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STG_to_DWH_Leads')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "2_STG_to_DWH"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_Leads",
								"type": "DatasetReference"
							},
							"name": "STG"
						},
						{
							"dataset": {
								"referenceName": "DWH_Leads",
								"type": "DatasetReference"
							},
							"name": "DWH"
						},
						{
							"dataset": {
								"referenceName": "STG_SystemUsers",
								"type": "DatasetReference"
							},
							"name": "SystemUser"
						},
						{
							"dataset": {
								"referenceName": "STG_Products",
								"type": "DatasetReference"
							},
							"name": "Product"
						},
						{
							"dataset": {
								"referenceName": "STG_Territories",
								"type": "DatasetReference"
							},
							"name": "Territory"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DWH_Leads",
								"type": "DatasetReference"
							},
							"name": "Nuevos"
						},
						{
							"dataset": {
								"referenceName": "DWH_Leads",
								"type": "DatasetReference"
							},
							"name": "Actualizaciones"
						}
					],
					"transformations": [
						{
							"name": "CrearHASH"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "Split"
						},
						{
							"name": "Insertar"
						},
						{
							"name": "Actualizar"
						},
						{
							"name": "JoinSystemUser"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "JoinProduct"
						},
						{
							"name": "JoinTerritory"
						},
						{
							"name": "JoinSystemUsers"
						},
						{
							"name": "JoinProducts"
						},
						{
							"name": "JoinTerritories"
						},
						{
							"name": "DerivedColumn2"
						}
					],
					"script": "source(output(\n\t\tSK_leadid as integer,\n\t\tBK_leadid as string,\n\t\tcreatedon as timestamp,\n\t\townerid as string,\n\t\tleadsource as integer,\n\t\tstatuscode as integer,\n\t\tindustry as integer,\n\t\tmodifiedon as timestamp,\n\t\tcustom_territorioid as string,\n\t\tcustom_productid as string,\n\t\trating as integer,\n\t\temployees as integer,\n\t\trevenue as decimal(19,4),\n\t\tHASHKEY as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tlimit: 10,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> STG\nsource(output(\n\t\tSK_leadid as integer,\n\t\tcreatedon as timestamp,\n\t\townwer as integer,\n\t\tleadsource as integer,\n\t\tstatuscode as integer,\n\t\tindustry as integer,\n\t\tmodifiedon as timestamp,\n\t\tterritory as integer,\n\t\tproduct as integer,\n\t\trating as integer,\n\t\temployees as integer,\n\t\trevenue as decimal(19,4),\n\t\thaskey as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DWH\nsource(output(\n\t\tSK_systemuserid as integer,\n\t\tHASHKEY as long,\n\t\tBK_systemuserid as string,\n\t\tfullname as string,\n\t\tparentsystemuserid as string,\n\t\tmodifiedon as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SystemUser\nsource(output(\n\t\tSK_productid as integer,\n\t\tHASHKEY as long,\n\t\tBK_productid as string,\n\t\tproductnumber as string,\n\t\tproductname as string,\n\t\tBK_family as string,\n\t\tstandarcost as decimal(19,4),\n\t\tmodifiedon as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Product\nsource(output(\n\t\tSK_territoryid as integer,\n\t\tHASHKEY as long,\n\t\tBK_territoryid as string,\n\t\tterritoryname as string,\n\t\tparentterritory as string,\n\t\tmodifiedon as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Territory\nSTG derive(STGHASH = crc32(512,upper(toString(ownerid)),toString(leadsource),toString(statuscode),toString(industry),toString(modifiedon),upper(toString(custom_territorioid)),upper(toString(custom_productid)),toString(rating),toString(employees),toInteger(toString(revenue),'############'))) ~> CrearHASH\nCrearHASH, DWH lookup(STG@SK_leadid == DWH@SK_leadid,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(haskey),\n\thaskey != STGHASH,\n\tdisjoint: false) ~> Split@(Nuevos, Actualizaciones, Nada)\nSplit@Nuevos alterRow(insertIf(true())) ~> Insertar\nSplit@Actualizaciones alterRow(updateIf(true())) ~> Actualizar\nInsertar, SystemUser join(ownerid == BK_systemuserid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSystemUser\nJoinTerritory derive(STGOwner = SK_systemuserid,\n\t\tSTGProduct = SK_productid,\n\t\tSTGTerritory = SK_territoryid) ~> DerivedColumn1\nJoinSystemUser, Product join(custom_productid == BK_productid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinProduct\nJoinProduct, Territory join(custom_territorioid == BK_territoryid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinTerritory\nActualizar, SystemUser join(ownerid == BK_systemuserid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSystemUsers\nJoinSystemUsers, Product join(custom_productid == BK_productid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinProducts\nJoinProducts, Territory join(custom_territorioid == BK_territoryid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinTerritories\nJoinTerritories derive(STGOwner = SK_systemuserid,\n\t\tSTGProduct = SK_productid,\n\t\tSTGTerritory = SK_territoryid) ~> DerivedColumn2\nDerivedColumn1 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_leadid as integer,\n\t\tcreatedon as timestamp,\n\t\townwer as integer,\n\t\tleadsource as integer,\n\t\tstatuscode as integer,\n\t\tindustry as integer,\n\t\tmodifiedon as timestamp,\n\t\tterritory as integer,\n\t\tproduct as integer,\n\t\trating as integer,\n\t\temployees as integer,\n\t\trevenue as decimal(19,4),\n\t\thaskey as long\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tSK_leadid = Split@Nuevos@SK_leadid,\n\t\tcreatedon = Split@Nuevos@createdon,\n\t\townwer = STGOwner,\n\t\tleadsource = Split@Nuevos@leadsource,\n\t\tstatuscode = Split@Nuevos@statuscode,\n\t\tindustry = Split@Nuevos@industry,\n\t\tmodifiedon = Split@Nuevos@modifiedon,\n\t\tterritory = STGTerritory,\n\t\tproduct = STGProduct,\n\t\trating = Split@Nuevos@rating,\n\t\temployees = Split@Nuevos@employees,\n\t\trevenue = Split@Nuevos@revenue,\n\t\thaskey = STGHASH\n\t)) ~> Nuevos\nDerivedColumn2 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_leadid as integer,\n\t\tcreatedon as timestamp,\n\t\townwer as integer,\n\t\tleadsource as integer,\n\t\tstatuscode as integer,\n\t\tindustry as integer,\n\t\tmodifiedon as timestamp,\n\t\tterritory as integer,\n\t\tproduct as integer,\n\t\trating as integer,\n\t\temployees as integer,\n\t\trevenue as decimal(19,4),\n\t\thaskey as long\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['SK_leadid'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tSK_leadid = Split@Actualizaciones@SK_leadid,\n\t\tcreatedon = Split@Actualizaciones@createdon,\n\t\townwer = STGOwner,\n\t\tleadsource = Split@Actualizaciones@leadsource,\n\t\tstatuscode = Split@Actualizaciones@statuscode,\n\t\tindustry = Split@Actualizaciones@industry,\n\t\tmodifiedon = Split@Actualizaciones@modifiedon,\n\t\tterritory = STGTerritory,\n\t\tproduct = STGProduct,\n\t\trating = Split@Actualizaciones@rating,\n\t\temployees = Split@Actualizaciones@employees,\n\t\trevenue = Split@Actualizaciones@revenue,\n\t\thaskey = STGHASH\n\t)) ~> Actualizaciones"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/STG_Leads')]",
				"[concat(variables('workspaceId'), '/datasets/DWH_Leads')]",
				"[concat(variables('workspaceId'), '/datasets/STG_SystemUsers')]",
				"[concat(variables('workspaceId'), '/datasets/STG_Products')]",
				"[concat(variables('workspaceId'), '/datasets/STG_Territories')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STG_to_DWH_Opportunities')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "2_STG_to_DWH"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_Opportunities",
								"type": "DatasetReference"
							},
							"name": "STG"
						},
						{
							"dataset": {
								"referenceName": "DWH_Opportunities",
								"type": "DatasetReference"
							},
							"name": "DWH"
						},
						{
							"dataset": {
								"referenceName": "STG_SystemUsers",
								"type": "DatasetReference"
							},
							"name": "SystemUsers"
						},
						{
							"dataset": {
								"referenceName": "STG_Accounts",
								"type": "DatasetReference"
							},
							"name": "Accounts"
						},
						{
							"dataset": {
								"referenceName": "STG_Leads",
								"type": "DatasetReference"
							},
							"name": "Leads"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DWH_Opportunities",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "DWH_Opportunities",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "DWHHASH"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						},
						{
							"name": "JoinSystemUser"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "JoinAccount"
						},
						{
							"name": "JoinLead"
						}
					],
					"script": "source(output(\n\t\tSK_opportunityid as integer,\n\t\tHASHKEY as long,\n\t\tBK_opportunityid as string,\n\t\townerid as string,\n\t\tparentaccountid as string,\n\t\torignatingleadid as string,\n\t\tcloseprobability as integer,\n\t\tmodifiedon as timestamp,\n\t\tcreatedon as timestamp,\n\t\tpurchasetimeframe as integer,\n\t\topportunityratingcode as integer,\n\t\tstatus as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> STG\nsource(output(\n\t\tSK_opportunityid as integer,\n\t\tHASHKEY as long,\n\t\townerid as integer,\n\t\tparentaccountid as integer,\n\t\torignatingleadid as integer,\n\t\tcloseprobability as integer,\n\t\tmodifiedon as timestamp,\n\t\tcreatedon as timestamp,\n\t\tpurchasetimeframe as integer,\n\t\topportunityratingcode as integer,\n\t\tstatus as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DWH\nsource(output(\n\t\tSK_systemuserid as integer,\n\t\tHASHKEY as long,\n\t\tBK_systemuserid as string,\n\t\tfullname as string,\n\t\tparentsystemuserid as string,\n\t\tmodifiedon as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SystemUsers\nsource(output(\n\t\tSK_accountid as integer,\n\t\tHASHKEY as long,\n\t\tBK_accountid as string,\n\t\tname as string,\n\t\townerid as string,\n\t\torignatingleadid as string,\n\t\trenevue as decimal(19,4),\n\t\tnumberofemployees as integer,\n\t\tterritoryid as string,\n\t\tindustrycode as integer,\n\t\tmodifiedon as timestamp,\n\t\tcreatedon as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Accounts\nsource(output(\n\t\tSK_leadid as integer,\n\t\tBK_leadid as string,\n\t\tcreatedon as timestamp,\n\t\townerid as string,\n\t\tleadsource as integer,\n\t\tstatuscode as integer,\n\t\tindustry as integer,\n\t\tmodifiedon as timestamp,\n\t\tcustom_territorioid as string,\n\t\tcustom_productid as string,\n\t\trating as integer,\n\t\temployees as integer,\n\t\trevenue as decimal(19,4),\n\t\tHASHKEY as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Leads\nSTG derive(DWHHASH = crc32(512,upper(toString(parentaccountid)),upper(toString(orignatingleadid)),toString(purchasetimeframe),toString(purchasetimeframe),toString(status),toString(opportunityratingcode),upper(toString(ownerid)),toString(modifiedon))) ~> DWHHASH\nDWHHASH, DWH lookup(STG@SK_opportunityid == DWH@SK_opportunityid,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(DWH@HASHKEY),\n\tDWH@HASHKEY!=STG@HASHKEY,\n\tdisjoint: false) ~> ConditionalSplit1@(Nuevos, Actualizaciones, Nada)\nConditionalSplit1@Nuevos alterRow(insertIf(true())) ~> AlterRow1\nConditionalSplit1@Actualizaciones alterRow(updateIf(true())) ~> AlterRow2\nAlterRow1, SystemUsers join(ConditionalSplit1@Nuevos@ownerid == BK_systemuserid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSystemUser\nJoinLead derive(STGUser = SK_systemuserid,\n\t\tSTGAccount = SK_accountid,\n\t\tSTGLead = SK_leadid) ~> DerivedColumn1\nJoinSystemUser, Accounts join(ConditionalSplit1@Nuevos@parentaccountid == BK_accountid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinAccount\nJoinAccount, Leads join(ConditionalSplit1@Nuevos@orignatingleadid == BK_leadid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinLead\nDerivedColumn1 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_opportunityid as integer,\n\t\tHASHKEY as long,\n\t\townerid as integer,\n\t\tparentaccountid as integer,\n\t\torignatingleadid as integer,\n\t\tcloseprobability as integer,\n\t\tmodifiedon as timestamp,\n\t\tcreatedon as timestamp,\n\t\tpurchasetimeframe as integer,\n\t\topportunityratingcode as integer,\n\t\tstatus as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tHASHKEY = DWHHASH,\n\t\townerid = STGUser,\n\t\tparentaccountid = STGAccount,\n\t\torignatingleadid = STGLead,\n\t\tcloseprobability = ConditionalSplit1@Nuevos@closeprobability,\n\t\tmodifiedon = ConditionalSplit1@Nuevos@modifiedon,\n\t\tcreatedon = ConditionalSplit1@Nuevos@createdon,\n\t\tpurchasetimeframe = ConditionalSplit1@Nuevos@purchasetimeframe,\n\t\topportunityratingcode = ConditionalSplit1@Nuevos@opportunityratingcode,\n\t\tstatus = ConditionalSplit1@Nuevos@status,\n\t\tSK_opportunityid = ConditionalSplit1@Nuevos@SK_opportunityid\n\t)) ~> sink1\nAlterRow2 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_opportunityid as integer,\n\t\tHASHKEY as long,\n\t\townerid as integer,\n\t\tparentaccountid as integer,\n\t\torignatingleadid as integer,\n\t\tcloseprobability as integer,\n\t\tmodifiedon as timestamp,\n\t\tcreatedon as timestamp,\n\t\tpurchasetimeframe as integer,\n\t\topportunityratingcode as integer,\n\t\tstatus as integer\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['SK_opportunityid'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink2"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/STG_Opportunities')]",
				"[concat(variables('workspaceId'), '/datasets/DWH_Opportunities')]",
				"[concat(variables('workspaceId'), '/datasets/STG_SystemUsers')]",
				"[concat(variables('workspaceId'), '/datasets/STG_Accounts')]",
				"[concat(variables('workspaceId'), '/datasets/STG_Leads')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STG_to_DWH_OpportunityProducts')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "2_STG_to_DWH"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_OpportunityProducts",
								"type": "DatasetReference"
							},
							"name": "STG"
						},
						{
							"dataset": {
								"referenceName": "DWH_OpportunityProducts",
								"type": "DatasetReference"
							},
							"name": "DWH"
						},
						{
							"dataset": {
								"referenceName": "STG_Products",
								"type": "DatasetReference"
							},
							"name": "Products"
						},
						{
							"dataset": {
								"referenceName": "STG_Opportunities",
								"type": "DatasetReference"
							},
							"name": "Opportunities"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DWH_OpportunityProducts",
								"type": "DatasetReference"
							},
							"name": "Nuevos"
						},
						{
							"dataset": {
								"referenceName": "DWH_OpportunityProducts",
								"type": "DatasetReference"
							},
							"name": "Actualizaciones"
						}
					],
					"transformations": [
						{
							"name": "CrearHASH"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "Split"
						},
						{
							"name": "Insertar"
						},
						{
							"name": "Actualizar"
						},
						{
							"name": "JoinProducts"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "JoinOpportunity"
						},
						{
							"name": "JoinProduct"
						},
						{
							"name": "JoinOpportunities"
						},
						{
							"name": "DerivedColumn2"
						}
					],
					"script": "source(output(\n\t\tSK_OpportunityProductid as integer,\n\t\tHASHKEY as long,\n\t\tBK_OpportunityProductid as string,\n\t\tproductid as string,\n\t\topportunityid as string,\n\t\tamount as decimal(19,4),\n\t\tpriceunit as decimal(19,4),\n\t\tquantity as integer,\n\t\tmodifiedon as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> STG\nsource(output(\n\t\tSK_opportunityproductid as integer,\n\t\tHASHKEY as long,\n\t\t{SK oportunityid} as integer,\n\t\tSK_productid as integer,\n\t\tamount as decimal(19,4),\n\t\tquantity as integer,\n\t\tpriceunit as decimal(19,4),\n\t\tmodifiedon as date\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DWH\nsource(output(\n\t\tSK_productid as integer,\n\t\tHASHKEY as long,\n\t\tBK_productid as string,\n\t\tproductnumber as string,\n\t\tproductname as string,\n\t\tBK_family as string,\n\t\tstandarcost as decimal(19,4),\n\t\tmodifiedon as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Products\nsource(output(\n\t\tSK_opportunityid as integer,\n\t\tHASHKEY as long,\n\t\tBK_opportunityid as string,\n\t\townerid as string,\n\t\tparentaccountid as string,\n\t\torignatingleadid as string,\n\t\tcloseprobability as integer,\n\t\tmodifiedon as timestamp,\n\t\tcreatedon as timestamp,\n\t\tpurchasetimeframe as integer,\n\t\topportunityratingcode as integer,\n\t\tstatus as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Opportunities\nSTG derive(STGHASH = crc32(512,toInteger(toString(amount),'############'),toInteger(toString(priceunit),'############'),toInteger(toString(quantity),'####'))) ~> CrearHASH\nCrearHASH, DWH lookup(STG@SK_OpportunityProductid == DWH@SK_opportunityproductid,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(DWH@HASHKEY),\n\tDWH@HASHKEY != STGHASH,\n\tdisjoint: false) ~> Split@(Nuevos, Actualizaciones, Nada)\nSplit@Nuevos alterRow(insertIf(true())) ~> Insertar\nSplit@Actualizaciones alterRow(updateIf(true())) ~> Actualizar\nInsertar, Products join(productid == BK_productid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinProducts\nJoinOpportunity derive(STGProduct = Products@SK_productid,\n\t\tSTGOpportunity = SK_opportunityid,\n\t\t{Rectify Modifiedon} = toDate(Split@Nuevos@modifiedon)) ~> DerivedColumn1\nJoinProducts, Opportunities join(opportunityid == BK_opportunityid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinOpportunity\nActualizar, Products join(productid == BK_productid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinProduct\nJoinProduct, Opportunities join(opportunityid == BK_opportunityid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinOpportunities\nJoinOpportunities derive(STGProduct = Products@SK_productid,\n\t\tSTGOpportunity = SK_opportunityid,\n\t\t{Rectify Modifiedon} = toDate(Split@Actualizaciones@modifiedon)) ~> DerivedColumn2\nDerivedColumn1 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_opportunityproductid as integer,\n\t\tHASHKEY as long,\n\t\t{SK oportunityid} as integer,\n\t\tSK_productid as integer,\n\t\tamount as decimal(19,4),\n\t\tquantity as integer,\n\t\tpriceunit as decimal(19,4),\n\t\tmodifiedon as date\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tSK_opportunityproductid = Split@Nuevos@SK_OpportunityProductid,\n\t\tHASHKEY = STGHASH,\n\t\t{SK oportunityid} = STGOpportunity,\n\t\tSK_productid = STGProduct,\n\t\tamount = Split@Nuevos@amount,\n\t\tquantity = Split@Nuevos@quantity,\n\t\tpriceunit = Split@Nuevos@priceunit,\n\t\tmodifiedon = {Rectify Modifiedon}\n\t)) ~> Nuevos\nDerivedColumn2 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_opportunityproductid as integer,\n\t\tHASHKEY as long,\n\t\t{SK oportunityid} as integer,\n\t\tSK_productid as integer,\n\t\tamount as decimal(19,4),\n\t\tquantity as integer,\n\t\tpriceunit as decimal(19,4),\n\t\tmodifiedon as date\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['SK_opportunityproductid'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tSK_opportunityproductid = Split@Actualizaciones@SK_OpportunityProductid,\n\t\tHASHKEY = STGHASH,\n\t\t{SK oportunityid} = STGOpportunity,\n\t\tSK_productid = STGProduct,\n\t\tamount = Split@Actualizaciones@amount,\n\t\tquantity = Split@Actualizaciones@quantity,\n\t\tpriceunit = Split@Actualizaciones@priceunit,\n\t\tmodifiedon = {Rectify Modifiedon}\n\t)) ~> Actualizaciones"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/STG_OpportunityProducts')]",
				"[concat(variables('workspaceId'), '/datasets/DWH_OpportunityProducts')]",
				"[concat(variables('workspaceId'), '/datasets/STG_Products')]",
				"[concat(variables('workspaceId'), '/datasets/STG_Opportunities')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STG_to_DWH_Products')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "2_STG_to_DWH"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_Products",
								"type": "DatasetReference"
							},
							"name": "STG"
						},
						{
							"dataset": {
								"referenceName": "DWH_Products",
								"type": "DatasetReference"
							},
							"name": "DWH"
						},
						{
							"dataset": {
								"referenceName": "STG_ProductFamilies",
								"type": "DatasetReference"
							},
							"name": "ProductFamilies"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DWH_Products",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "DWH_Products",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "STGHASH"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						},
						{
							"name": "Join1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Join2"
						},
						{
							"name": "DerivedColumn2"
						}
					],
					"script": "source(output(\n\t\tSK_productid as integer,\n\t\tHASHKEY as long,\n\t\tBK_productid as string,\n\t\tproductnumber as string,\n\t\tproductname as string,\n\t\tBK_family as string,\n\t\tstandarcost as decimal(19,4),\n\t\tmodifiedon as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> STG\nsource(output(\n\t\tSK_productid as integer,\n\t\tHASHKEY as long,\n\t\tproductnumber as string,\n\t\tproductname as string,\n\t\tSK_family as integer,\n\t\tstandarcost as decimal(19,4)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DWH\nsource(output(\n\t\tSK_productfamilyid as integer,\n\t\tHASHKEY as long,\n\t\tBK_productfamilyid as string,\n\t\tproductnumber as string,\n\t\tproductname as string,\n\t\tmodifiedon as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ProductFamilies\nSTG derive(STGHASH = crc32(512,toString(productname),toString(productnumber),toInteger(toString(standarcost),'############'),upper(toString(BK_family)))) ~> STGHASH\nSTGHASH, DWH lookup(STG@SK_productid == DWH@SK_productid,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(DWH@HASHKEY),\n\tSTGHASH!=DWH@HASHKEY,\n\tdisjoint: false) ~> ConditionalSplit1@(Nuevos, Actualizaciones, Nada)\nConditionalSplit1@Nuevos alterRow(insertIf(true())) ~> AlterRow1\nConditionalSplit1@Actualizaciones alterRow(updateIf(true())) ~> AlterRow2\nAlterRow1, ProductFamilies join(BK_family == BK_productfamilyid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join1\nJoin1 derive(STGFamily = SK_productfamilyid) ~> DerivedColumn1\nAlterRow2, ProductFamilies join(BK_family == BK_productfamilyid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join2\nJoin2 derive(STGFamily = SK_productfamilyid) ~> DerivedColumn2\nDerivedColumn1 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_productid as integer,\n\t\tHASHKEY as long,\n\t\tproductnumber as string,\n\t\tproductname as string,\n\t\tSK_family as integer,\n\t\tstandarcost as decimal(19,4)\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tHASHKEY = STGHASH,\n\t\tproductnumber = ConditionalSplit1@Nuevos@productnumber,\n\t\tproductname = ConditionalSplit1@Nuevos@productname,\n\t\tSK_family = STGFamily,\n\t\tstandarcost = ConditionalSplit1@Nuevos@standarcost,\n\t\tSK_productid = ConditionalSplit1@Nuevos@SK_productid\n\t)) ~> sink1\nDerivedColumn2 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_productid as integer,\n\t\tHASHKEY as long,\n\t\tproductnumber as string,\n\t\tproductname as string,\n\t\tSK_family as integer,\n\t\tstandarcost as decimal(19,4)\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['SK_productid'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tSK_productid = ConditionalSplit1@Actualizaciones@SK_productid,\n\t\tHASHKEY = STGHASH,\n\t\tproductnumber = ConditionalSplit1@Actualizaciones@productnumber,\n\t\tproductname = ConditionalSplit1@Actualizaciones@productname,\n\t\tSK_family = STGFamily,\n\t\tstandarcost = ConditionalSplit1@Actualizaciones@standarcost\n\t)) ~> sink2"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/STG_Products')]",
				"[concat(variables('workspaceId'), '/datasets/DWH_Products')]",
				"[concat(variables('workspaceId'), '/datasets/STG_ProductFamilies')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STG_to_DWH_ProductsFamily')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "2_STG_to_DWH"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_ProductFamilies",
								"type": "DatasetReference"
							},
							"name": "STG"
						},
						{
							"dataset": {
								"referenceName": "DWH_ProductFamilies",
								"type": "DatasetReference"
							},
							"name": "DWH"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DWH_ProductFamilies",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "DWH_ProductFamilies",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "STGHASH"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						}
					],
					"script": "source(output(\n\t\tSK_productfamilyid as integer,\n\t\tHASHKEY as long,\n\t\tBK_productfamilyid as string,\n\t\tproductnumber as string,\n\t\tproductname as string,\n\t\tmodifiedon as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> STG\nsource(output(\n\t\tSK_productfamilyid as integer,\n\t\tHASHKEY as long,\n\t\tproductnumber as string,\n\t\tproductname as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DWH\nSTG derive(STGHASH = crc32(512,toString(productname),toString(productnumber))) ~> STGHASH\nSTGHASH, DWH lookup(STG@SK_productfamilyid == DWH@SK_productfamilyid,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(DWH@HASHKEY),\n\tSTGHASH!=DWH@HASHKEY,\n\tdisjoint: false) ~> ConditionalSplit1@(Nuevos, Actualizaciones, Nada)\nConditionalSplit1@Nuevos alterRow(insertIf(true())) ~> AlterRow1\nConditionalSplit1@Actualizaciones alterRow(updateIf(true())) ~> AlterRow2\nAlterRow1 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_productfamilyid as integer,\n\t\tHASHKEY as long,\n\t\tproductnumber as string,\n\t\tproductname as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tHASHKEY = STGHASH,\n\t\tproductnumber = ConditionalSplit1@Nuevos@productnumber,\n\t\tproductname = ConditionalSplit1@Nuevos@productname,\n\t\tSK_productfamilyid = ConditionalSplit1@Nuevos@SK_productfamilyid\n\t)) ~> sink1\nAlterRow2 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_productfamilyid as integer,\n\t\tHASHKEY as long,\n\t\tproductnumber as string,\n\t\tproductname as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['SK_productfamilyid'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tSK_productfamilyid = ConditionalSplit1@Actualizaciones@SK_productfamilyid,\n\t\tHASHKEY = STGHASH,\n\t\tproductnumber = ConditionalSplit1@Actualizaciones@productnumber,\n\t\tproductname = ConditionalSplit1@Actualizaciones@productname\n\t)) ~> sink2"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/STG_ProductFamilies')]",
				"[concat(variables('workspaceId'), '/datasets/DWH_ProductFamilies')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STG_to_DWH_SystemManagers')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "2_STG_to_DWH"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_SystemUsersManagers",
								"type": "DatasetReference"
							},
							"name": "STG"
						},
						{
							"dataset": {
								"referenceName": "DWH_SystemManagers",
								"type": "DatasetReference"
							},
							"name": "DWH"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DWH_SystemManagers",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "DWH_SystemManagers",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "STGHASH"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						}
					],
					"script": "source(output(\n\t\tSK_systemusermanagerid as integer,\n\t\tHASHKEY as long,\n\t\tBK_systemusermanagerid as string,\n\t\tfullname as string,\n\t\tmodifiedon as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> STG\nsource(output(\n\t\tSK_systemusermanagerid as integer,\n\t\tHASHKEY as long,\n\t\tfullname as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DWH\nSTG derive(STGHASH = crc32(512,toString(fullname))) ~> STGHASH\nSTGHASH, DWH lookup(STG@SK_systemusermanagerid == DWH@SK_systemusermanagerid,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(DWH@HASHKEY),\n\tSTGHASH!=DWH@HASHKEY,\n\tdisjoint: false) ~> ConditionalSplit1@(Nuevos, Actualizaciones, Nada)\nConditionalSplit1@Nuevos alterRow(insertIf(true())) ~> AlterRow1\nConditionalSplit1@Actualizaciones alterRow(updateIf(true())) ~> AlterRow2\nAlterRow1 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_systemusermanagerid as integer,\n\t\tHASHKEY as long,\n\t\tfullname as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tSK_systemusermanagerid = ConditionalSplit1@Nuevos@SK_systemusermanagerid,\n\t\tHASHKEY = STGHASH,\n\t\tfullname = ConditionalSplit1@Nuevos@fullname\n\t)) ~> sink1\nAlterRow2 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_systemusermanagerid as integer,\n\t\tHASHKEY as long,\n\t\tfullname as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['SK_systemusermanagerid'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tSK_systemusermanagerid = ConditionalSplit1@Actualizaciones@SK_systemusermanagerid,\n\t\tHASHKEY = STGHASH,\n\t\tfullname = ConditionalSplit1@Actualizaciones@fullname\n\t)) ~> sink2"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/STG_SystemUsersManagers')]",
				"[concat(variables('workspaceId'), '/datasets/DWH_SystemManagers')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STG_to_DWH_SystemUsers')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "2_STG_to_DWH"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_SystemUsers",
								"type": "DatasetReference"
							},
							"name": "STG"
						},
						{
							"dataset": {
								"referenceName": "DWH_SystemUsers",
								"type": "DatasetReference"
							},
							"name": "DWH"
						},
						{
							"dataset": {
								"referenceName": "STG_SystemUsersManagers",
								"type": "DatasetReference"
							},
							"name": "STG2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DWH_SystemUsers",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "DWH_SystemUsers",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "STGHASH"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						},
						{
							"name": "Join1"
						}
					],
					"script": "source(output(\n\t\tSK_systemuserid as integer,\n\t\tHASHKEY as long,\n\t\tBK_systemuserid as string,\n\t\tfullname as string,\n\t\tparentsystemuserid as string,\n\t\tmodifiedon as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> STG\nsource(output(\n\t\tSK_systemuserid as integer,\n\t\tHASHKEY as long,\n\t\tfullname as string,\n\t\tmanager as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DWH\nsource(output(\n\t\tSK_systemusermanagerid as integer,\n\t\tHASHKEY as long,\n\t\tBK_systemusermanagerid as string,\n\t\tfullname as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> STG2\nSTG derive(DWHHASH = crc32(512,upper(toString(fullname)),upper(toString(parentsystemuserid)))) ~> STGHASH\nJoin1, DWH lookup(STG@SK_systemuserid == DWH@SK_systemuserid,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(DWH@HASHKEY),\n\tDWH@HASHKEY!=STG@HASHKEY,\n\tdisjoint: false) ~> ConditionalSplit1@(Nuevos, Actualizaciones, Nada)\nConditionalSplit1@Nuevos alterRow(insertIf(true())) ~> AlterRow1\nConditionalSplit1@Actualizaciones alterRow(updateIf(true())) ~> AlterRow2\nSTGHASH, STG2 join(parentsystemuserid == BK_systemusermanagerid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join1\nAlterRow1 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_systemuserid as integer,\n\t\tHASHKEY as long,\n\t\tfullname as string,\n\t\tmanager as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tHASHKEY = DWHHASH,\n\t\tfullname = ConditionalSplit1@Nuevos@fullname,\n\t\tmanager = SK_systemusermanagerid,\n\t\tSK_systemuserid = ConditionalSplit1@Nuevos@SK_systemuserid\n\t)) ~> sink1\nAlterRow2 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_systemuserid as integer,\n\t\tHASHKEY as long,\n\t\tfullname as string,\n\t\tmanager as integer\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['SK_systemuserid'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tSK_systemuserid = ConditionalSplit1@Actualizaciones@SK_systemuserid,\n\t\tHASHKEY = DWHHASH,\n\t\tfullname = ConditionalSplit1@Actualizaciones@fullname,\n\t\tmanager = SK_systemusermanagerid\n\t)) ~> sink2"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/STG_SystemUsers')]",
				"[concat(variables('workspaceId'), '/datasets/DWH_SystemUsers')]",
				"[concat(variables('workspaceId'), '/datasets/STG_SystemUsersManagers')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STG_to_DWH_Territories')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "2_STG_to_DWH"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_Territories",
								"type": "DatasetReference"
							},
							"name": "STG"
						},
						{
							"dataset": {
								"referenceName": "STG_Territories",
								"type": "DatasetReference"
							},
							"name": "STG2"
						},
						{
							"dataset": {
								"referenceName": "DWH_Territories",
								"type": "DatasetReference"
							},
							"name": "DWH"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DWH_Territories",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "DWH_Territories",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "Lookup1"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						},
						{
							"name": "STGHASH"
						},
						{
							"name": "Join1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Join2"
						},
						{
							"name": "DerivedColumn2"
						}
					],
					"script": "source(output(\n\t\tSK_territoryid as integer,\n\t\tHASHKEY as long,\n\t\tBK_territoryid as string,\n\t\tterritoryname as string,\n\t\tparentterritory as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> STG\nsource(output(\n\t\tSK_territoryid as integer,\n\t\tHASHKEY as long,\n\t\tBK_territoryid as string,\n\t\tterritoryname as string,\n\t\tparentterritory as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> STG2\nsource(output(\n\t\tSK_territoryid as integer,\n\t\tHASHKEY as long,\n\t\tterritoryname as string,\n\t\tsk_parentterritory as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DWH\nSTGHASH, DWH lookup(STG@SK_territoryid == DWH@SK_territoryid,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(DWH@HASHKEY),\n\tSTGHASH2!=DWH@HASHKEY,\n\tdisjoint: false) ~> ConditionalSplit1@(Nuevos, Actualizaciones, Nada)\nConditionalSplit1@Nuevos alterRow(insertIf(true())) ~> AlterRow1\nConditionalSplit1@Actualizaciones alterRow(updateIf(true())) ~> AlterRow2\nSTG derive(STGHASH2 = crc32(512,toString(territoryname),upper(toString(parentterritory)))) ~> STGHASH\nAlterRow1, STG2 join(upper(ConditionalSplit1@Nuevos@parentterritory) == STG2@BK_territoryid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join1\nJoin1 derive(STG2ParentTerritory = STG2@SK_territoryid) ~> DerivedColumn1\nAlterRow2, STG2 join(upper(ConditionalSplit1@Actualizaciones@parentterritory) == STG2@BK_territoryid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join2\nJoin2 derive(STG2ParentTerritory = STG2@SK_territoryid) ~> DerivedColumn2\nDerivedColumn1 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_territoryid as integer,\n\t\tHASHKEY as long,\n\t\tterritoryname as string,\n\t\tSK_parentterritory as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tSK_territoryid = ConditionalSplit1@Nuevos@SK_territoryid,\n\t\tHASHKEY = STGHASH2,\n\t\tterritoryname = ConditionalSplit1@Nuevos@territoryname,\n\t\tSK_parentterritory = STG2ParentTerritory\n\t)) ~> sink1\nDerivedColumn2 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tSK_territoryid as integer,\n\t\tHASHKEY as long,\n\t\tterritoryname as string,\n\t\tSK_parentterritory as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['SK_territoryid'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tSK_territoryid = ConditionalSplit1@Actualizaciones@SK_territoryid,\n\t\tHASHKEY = STGHASH2,\n\t\tterritoryname = ConditionalSplit1@Actualizaciones@territoryname,\n\t\tSK_parentterritory = STG2ParentTerritory\n\t)) ~> sink2"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/STG_Territories')]",
				"[concat(variables('workspaceId'), '/datasets/DWH_Territories')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL Accounts')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://tfmdlsgen2account.blob.core.windows.net/tfmfilesystem/leads/data_c0848f28-8aa4-4930-86fc-23c80cf9ca11_3bede311-bcc5-4074-a1c5-f6859926de81.parquet',\n        FORMAT='PARQUET'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL SystemUsers')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://tfmdlsgen2account.dfs.core.windows.net/tfmfilesystem/systemusers/data_b3ef14d2-4d4c-4f49-941a-78b546ddbf56_cdb0c59b-42cb-4c03-8c1e-5d9ac929314e.parquet',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://tfmdlsgen2account.dfs.core.windows.net/tfmfilesystem/systemusersmanagers/data_fa52e1d7-9711-4254-b626-801fd22e9e3d_3e756228-1664-460a-ae26-608c969c7156.parquet',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		}
	]
}